static void METHOD_1 ( TYPE_1 user ) { synchronized ( TYPE_2 ) { TYPE_2 . METHOD_2 ( user ) ; TYPE_2 . METHOD_3 ( ) ; } }
public synchronized void METHOD_4 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) != VAR_1 ) { METHOD_2 ( ) ; VAR_3 = VAR_1 ; } if ( VAR_5 ) return ; VAR_5 = true ; METHOD_3 ( ) ; }
public static TYPE_1 get ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_3 . METHOD_3 ( 0 ) ; } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_4 ( ) ; } return new TYPE_1 ( VAR_1 , null ) ; }
public java.util.ArrayList < java.lang.String > METHOD_1 ( ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return VAR_2 ; }
public synchronized boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_3 [ VAR_1 ] ) == null ) return false ; boolean VAR_2 = METHOD_2 ( 1 , 0 , VAR_3 [ VAR_1 ] ) ; if ( VAR_2 ) METHOD_3 ( ) ; return VAR_2 ; }
public void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { synchronized ( VAR_2 ) { METHOD_2 ( VAR_1 ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }
public TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; return VAR_3 . get ( 0 ) ; } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { if ( ( VAR_5 ) == null ) VAR_5 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; return VAR_5 ; }
public boolean METHOD_1 ( final TYPE_2 key , final TYPE_2 value ) { synchronized ( VAR_1 ) { return VAR_2 . METHOD_1 ( key , value ) ; } }
public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; }
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) return null ; synchronized ( VAR_1 ) { if ( ( VAR_1 . size ( ) ) == 0 ) return null ; return VAR_1 . get ( 0 ) ; } }
public synchronized int METHOD_1 ( java.lang.String key , int VAR_1 ) { if ( STRING_1 . equals ( key ) ) { return 0 ; } else { return super . METHOD_1 ( key , VAR_1 ) ; } }
public void METHOD_1 ( java.lang.String url , TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . put ( VAR_1 , url ) ; if ( VAR_3 ) { synchronized ( this ) { this . METHOD_3 ( ) ; } } }
public static void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . add ( VAR_3 ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 0 ) ; } return VAR_1 ; }
public void METHOD_1 ( ) { synchronized ( VAR_2 ) { VAR_1 = true ; VAR_2 . METHOD_2 ( ) ; } }
public java.lang.String METHOD_1 ( ) { synchronized ( VAR_2 ) { return ( VAR_1 ) != null ? VAR_1 . METHOD_2 ( ) : null ; } }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { while ( ! ( VAR_1 . isEmpty ( ) ) ) { METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; } } }
public synchronized void METHOD_1 ( TYPE_1 n ) { if ( n && ( ! ( VAR_1 ) ) ) { VAR_2 . METHOD_2 ( ) ; } else if ( n == false ) { VAR_2 . METHOD_3 ( ) ; } VAR_1 = n ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; } } } return VAR_1 ; }
void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , TYPE_1 label , TYPE_2 VAR_3 ) { synchronized ( VAR_4 ) { final TYPE_3 db = VAR_5 . METHOD_2 ( ) ; TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_2 , label , VAR_3 ) ; } }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_3 = VAR_2 . get ( VAR_1 ) ; return VAR_3 == null ? VAR_4 : VAR_3 ; }
public long METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) <= 0 ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; } return VAR_1 ; } }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 event : VAR_2 ) { METHOD_2 ( event , true ) ; } VAR_2 . METHOD_3 ( ) ; VAR_3 = true ; } }
public static synchronized void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
void METHOD_1 ( ) { this . VAR_1 . set ( true ) ; if ( ( this . VAR_2 . get ( ) ) != ( VAR_3 ) ) { METHOD_2 ( this ) ; } }
public boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return ( ( VAR_2 ) != null ) && ( ( ( VAR_2 . METHOD_2 ( ) ) < 0 ) || ( ( VAR_2 . METHOD_2 ( ) ) >= ( length ) ) ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String value ) throws TYPE_2 , TYPE_3 { VAR_3 . METHOD_1 ( VAR_1 , VAR_2 , value ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; }
public boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return ( ! ( ( VAR_2 ) instanceof TYPE_1 ) ) || ( ( ( TYPE_1 ) ( VAR_2 ) ) . METHOD_1 ( ) ) ; } }
protected synchronized int METHOD_1 ( ) { return VAR_1 . get ( ) ; }
public synchronized void METHOD_2 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }
public java.lang.String METHOD_1 ( ) { log . info ( STRING_1 ) ; return VAR_2 ; }
public java.lang.String METHOD_1 ( ) { log . info ( STRING_1 , VAR_1 ) ; return VAR_3 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_1 . METHOD_3 ( ) ) ; }
public synchronized void METHOD_1 ( TYPE_2 VAR_2 ) { VAR_3 . add ( VAR_2 ) ; TYPE_3 . d ( VAR_4 , ( STRING_1 + ( VAR_3 . size ( ) ) ) ) ; }
public synchronized int METHOD_1 ( ) throws java.io.IOException { int value = super . METHOD_1 ( ) ; METHOD_2 ( ( value >= 0 ? 1 : - 1 ) ) ; return value ; }
protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } } } return VAR_1 ; }
public synchronized void close ( ) { VAR_1 = true ; synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( ) ; } }
public synchronized void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; update ( ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String error ) throws java.lang.Exception { super . METHOD_1 ( projectName , VAR_1 , VAR_2 , error ) ; }
public synchronized boolean METHOD_1 ( java.lang.String VAR_1 ) { boolean res = false ; if ( VAR_2 . contains ( VAR_1 ) ) { res = true ; } return res ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
synchronized void METHOD_1 ( final float VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; VAR_5 . METHOD_3 ( ) ; }
private synchronized void METHOD_1 ( java.lang.String VAR_1 ) { VAR_3 = VAR_1 ; }
private synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; }
private synchronized int METHOD_1 ( ) { if ( ( VAR_2 . size ( ) ) == 0 ) { return - 1 ; } return ( ++ ( VAR_1 ) ) % ( VAR_2 . size ( ) ) ; }
public synchronized void add ( float value ) { this . value += value ; this . VAR_1 = true ; }
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_4 , new TYPE_2 ( VAR_1 , VAR_2 ) ) ; }
protected void METHOD_1 ( ) throws TYPE_1 { assert ( VAR_2 ) != null ; TYPE_2 < TYPE_3 > VAR_1 = new TYPE_2 < TYPE_3 > ( ) ; METHOD_2 ( VAR_2 , STRING_1 , VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 . get ( ) ) ; }
public synchronized void METHOD_1 ( ) { for ( TYPE_1 client : VAR_1 ) { client . METHOD_1 ( ) ; } }
public void METHOD_1 ( ) { VAR_2 = false ; VAR_3 = null ; VAR_4 . METHOD_2 ( ) ; }
public synchronized TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 != null ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( null ) ; } ( length ) -- ; return VAR_1 ; }
public void METHOD_1 ( final TYPE_1 server ) { VAR_1 . add ( server ) ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws java.io.IOException { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; } return VAR_2 ; }
public boolean METHOD_1 ( ) { return ( VAR_1 . size ( ) ) > 0 ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 < TYPE_2 , TYPE_3 > ( ) ; } }
private synchronized TYPE_1 METHOD_1 ( ) { java.lang.String VAR_2 = METHOD_2 ( STRING_1 ) ; return VAR_3 . METHOD_3 ( VAR_2 , VAR_4 class ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public synchronized boolean METHOD_1 ( ) { return ( VAR_1 ) && ( ( VAR_2 . size ( ) ) == 0 ) ; }
public void METHOD_1 ( TYPE_1 client ) { if ( ( this . VAR_2 ) != null ) this . VAR_2 . METHOD_3 ( client ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) { return ( VAR_1 ) == null ? new TYPE_1 ( ) : VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_5 . METHOD_3 ( VAR_1 ) , VAR_3 , VAR_1 ) ; TYPE_3 VAR_4 = VAR_5 . get ( VAR_1 ) ; VAR_4 . METHOD_4 ( VAR_1 , VAR_6 ) ; }
public java.util.Map < java.lang.String , ? > METHOD_1 ( ) { synchronized ( this ) { METHOD_2 ( ) ; return new TYPE_3 < java.lang.String , TYPE_2 > ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( ) throws java.io.IOException { METHOD_3 ( VAR_4 ) ; if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { input . close ( ) ; VAR_2 . close ( ) ; VAR_3 . close ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { if ( VAR_4 ) { throw new TYPE_4 ( ) ; } VAR_5 = VAR_3 ; VAR_4 = true ; if ( ( VAR_6 ) > 0 ) { METHOD_2 ( ) ; } }
public static TYPE_1 METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; return VAR_2 ; }
public void update ( ) { if ( ( VAR_1 ) != null ) VAR_1 . update ( ) ; }
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 . put ( VAR_4 . getId ( ) , VAR_2 ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
public static synchronized java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_2 , null ) ; }
static final synchronized void METHOD_1 ( final long VAR_1 ) { final TYPE_1 client = VAR_2 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; client . METHOD_2 ( ) ; }
public void METHOD_1 ( java.lang.String message ) { synchronized ( VAR_1 ) { VAR_1 . add ( 0 , message ) ; VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_1 . size ( ) ) ) ) ; VAR_1 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( ) { if ( this . VAR_1 ) { try { this . VAR_2 . close ( ) ; } catch ( java.io.IOException e ) { throw new TYPE_1 ( STRING_1 , e ) ; } } this . VAR_1 = false ; }
protected boolean METHOD_1 ( ) { return VAR_1 . get ( ) ; }
public synchronized void METHOD_1 ( ) throws java.io.IOException { VAR_1 [ 0 ] = VAR_2 [ 0 ] ; VAR_1 [ 1 ] = VAR_2 [ 1 ] ; VAR_3 = VAR_4 ; super . METHOD_1 ( ) ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } }
private synchronized int METHOD_1 ( ) { int index = VAR_1 . METHOD_2 ( ) ; if ( index == ( ( VAR_2 . get ( ) ) - 1 ) ) { VAR_1 . set ( VAR_3 ) ; } return index ; }
void METHOD_1 ( long VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( ) throws java.io.IOException { in . METHOD_1 ( ) ; }
public TYPE_1 METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; } } return VAR_1 ; }
public void update ( TYPE_1 VAR_1 , int VAR_2 ) throws TYPE_2 { synchronized ( VAR_3 ) { for ( TYPE_3 VAR_4 : VAR_3 . values ( ) ) { VAR_4 . update ( VAR_1 , VAR_2 ) ; } } }
public synchronized void METHOD_1 ( ) { METHOD_3 ( ) ; super . METHOD_1 ( ) ; }
public void METHOD_1 ( final int VAR_1 ) { final boolean VAR_2 = ( VAR_3 . put ( VAR_1 , VAR_1 ) ) == null ; if ( VAR_2 ) { synchronized ( VAR_4 ) { VAR_4 . add ( VAR_1 ) ; } } }
private synchronized boolean METHOD_1 ( ) { return ! ( VAR_1 . isEmpty ( ) ) ; }
short METHOD_1 ( java.lang.String VAR_1 , java.lang.String data ) { synchronized ( VAR_2 ) { VAR_2 . add ( new TYPE_1 ( VAR_1 , data ) ) ; VAR_2 . METHOD_2 ( ) ; } return VAR_3 ; }
public void METHOD_1 ( byte [ ] data ) { synchronized ( VAR_1 ) { VAR_1 . add ( data ) ; } }
public synchronized void METHOD_1 ( ) { java.lang.String VAR_1 = VAR_2 . get ( ) . getMessage ( ) ; TYPE_1 . info ( STRING_1 , VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }
public synchronized long METHOD_1 ( ) { if ( ( VAR_1 ) == 0 ) { METHOD_2 ( ) ; } if ( ( ++ ( VAR_1 ) ) == ( VAR_2 ) ) { VAR_1 = 0 ; } return ++ ( value ) ; }
public void METHOD_1 ( ) { synchronized ( METHOD_2 ( ) ) { METHOD_1 ( VAR_3 ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this . VAR_2 ) { this . VAR_2 . METHOD_2 ( VAR_1 ) ; } }
public void run ( ) { VAR_2 . METHOD_1 ( VAR_3 ) ; }
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String message ) { synchronized ( log ) { java.util.ArrayList < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . add ( message ) ; METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 ) ; } }
public synchronized void METHOD_1 ( int VAR_1 ) { if ( ( this . VAR_1 ) <= VAR_1 ) { this . VAR_1 = VAR_1 ; } else { return ; } }
protected final void METHOD_1 ( ) { synchronized ( VAR_1 class ) { VAR_2 . put ( VAR_3 , this ) ; } }
private synchronized void METHOD_1 ( TYPE_1 message ) { for ( TYPE_2 VAR_1 : new java.util.ArrayList < > ( VAR_2 ) ) { VAR_1 . METHOD_2 ( message ) ; } }
public void METHOD_1 ( ) { this . VAR_1 = true ; synchronized ( VAR_2 ) { for ( TYPE_1 t : VAR_3 ) { t . close ( ) ; t . METHOD_2 ( ) ; } } }
private synchronized void METHOD_1 ( TYPE_1 insert ) { if ( ( VAR_1 ) != null ) { VAR_1 . add ( insert ) ; if ( ( VAR_1 . size ( ) ) > ( VAR_2 ) ) { insert ( VAR_1 ) ; } } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; } return VAR_1 ; }
public byte [ ] METHOD_1 ( ) { synchronized ( this . VAR_1 ) { if ( this . VAR_1 . isEmpty ( ) ) { return null ; } return this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } }
public void run ( ) { VAR_1 . METHOD_1 ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) ) ; synchronized ( this ) { if ( ( VAR_3 . METHOD_2 ( VAR_2 ) ) != null ) { METHOD_3 ( VAR_2 ) ; } } }
public synchronized void METHOD_1 ( java.lang.String key , TYPE_1 data , TYPE_2 VAR_1 ) { put ( key , new TYPE_3 ( data , VAR_1 ) ) ; VAR_2 . METHOD_2 ( key ) ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_1 = VAR_1 ; }
public static synchronized void close ( ) { if ( ( VAR_1 ) == 1 ) VAR_2 . close ( ) ; if ( ( VAR_1 ) > 0 ) ( VAR_1 ) -- ; }
public boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return false ; } }
public synchronized boolean METHOD_1 ( ) { return ( VAR_1 . size ( ) ) != 0 ; }
static final synchronized long METHOD_1 ( final TYPE_1 client ) { final long VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_2 . put ( TYPE_3 . METHOD_3 ( VAR_1 ) , client ) ; return VAR_1 ; }
private synchronized void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_2 . METHOD_2 ( ) ; }
public void METHOD_1 ( ) { METHOD_2 ( true ) ; VAR_1 = false ; synchronized ( this ) { this . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( int VAR_1 ) { VAR_2 += VAR_1 ; METHOD_2 ( ) ; }
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { synchronized ( VAR_1 ) { while ( ! ( VAR_1 . METHOD_2 ( ) ) ) VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } }
public void METHOD_1 ( final TYPE_1 server ) { VAR_1 . METHOD_2 ( server ) ; }
private static synchronized TYPE_1 METHOD_1 ( TYPE_3 VAR_4 ) { if ( ( VAR_1 ) == null ) { VAR_1 = VAR_4 . METHOD_3 ( VAR_2 , VAR_3 ) ; } return VAR_1 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = true ; synchronized ( this ) { METHOD_2 ( ) ; METHOD_3 ( ) ; } }
public static void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_3 = VAR_1 ; }
public synchronized TYPE_2 METHOD_1 ( ) { return ( VAR_1 ) == null ? 0 : VAR_1 ; }
public void METHOD_1 ( long VAR_1 , long VAR_2 ) { synchronized ( VAR_3 ) { METHOD_2 ( VAR_2 ) ; if ( ! ( VAR_4 . contains ( VAR_2 ) ) ) { VAR_4 . add ( VAR_2 ) ; } } }
public java.util.Set < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return new TYPE_2 ( VAR_1 . values ( ) ) ; } }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 ) ) { METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_2 = true ; } } }
public synchronized boolean METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . edit ( ) ; VAR_1 . METHOD_2 ( ) ; VAR_1 . commit ( ) ; return true ; }
public void METHOD_1 ( ) { synchronized ( this ) { if ( VAR_1 ) { return ; } VAR_1 = true ; for ( final TYPE_1 VAR_2 : VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; } VAR_3 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 user ) { TYPE_2 VAR_1 = METHOD_2 ( user ) ; VAR_1 . METHOD_3 ( true ) ; }
void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = VAR_5 ; if ( VAR_3 != null ) VAR_3 . METHOD_3 ( this ) ; VAR_2 = null ; }
protected boolean METHOD_1 ( ) { try { if ( ( ( VAR_1 ) != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { return true ; } } catch ( TYPE_1 e ) { } return false ; }
protected synchronized TYPE_1 METHOD_1 ( ) { return new TYPE_3 ( METHOD_2 ( ) ) . METHOD_3 ( this ) . METHOD_4 ( this ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; }
public void run ( ) { synchronized ( VAR_1 ) { if ( VAR_1 ) { log . info ( STRING_1 ) ; METHOD_1 ( ) ; METHOD_3 ( ) ; METHOD_2 ( ) ; log . info ( STRING_2 ) ; VAR_1 = false ; } } }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } TYPE_2 . METHOD_2 ( ) ; }
private synchronized void METHOD_1 ( int type , java.lang.String msg , TYPE_1 ... args ) { METHOD_1 ( type , msg , null , false , args ) ; }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { return ; } VAR_1 = VAR_5 ; VAR_3 . METHOD_2 ( VAR_4 ) ; }
public void close ( ) throws java.io.IOException { synchronized ( VAR_1 ) { VAR_2 . close ( ) ; } }
public synchronized void close ( ) throws java.io.IOException { METHOD_1 ( path ) ; super . close ( ) ; }
public void close ( ) { synchronized ( this ) { this . VAR_1 = true ; } this . VAR_3 . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 events ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( events . getId ( ) ) ; VAR_4 . put ( VAR_2 , events ) ; VAR_5 . METHOD_4 ( VAR_2 , events ) ; }
public void add ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } }
public void METHOD_1 ( java.lang.String VAR_1 ) { { TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_3 . METHOD_3 ( 0 ) ) ) ; VAR_2 . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ; } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_2 VAR_2 = VAR_3 class ; synchronized ( VAR_2 ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }
public synchronized boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_3 [ VAR_1 ] ) == null ) return false ; boolean VAR_2 = METHOD_1 ( VAR_3 [ VAR_1 ] ) ; if ( VAR_2 ) METHOD_2 ( ) ; return VAR_2 ; }
protected synchronized void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( this ) . METHOD_4 ( this ) . METHOD_6 ( VAR_3 ) . METHOD_7 ( ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( this ) ; VAR_1 . METHOD_4 ( this ) ; METHOD_3 ( VAR_1 ) ; METHOD_5 ( ) ; } }
protected void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = java.util.Collections . METHOD_2 ( new java.util.ArrayList < TYPE_1 > ( ) ) ; METHOD_3 ( VAR_2 ) ; }
public synchronized boolean METHOD_1 ( int VAR_1 ) { if ( ( VAR_2 [ VAR_1 ] ) == null ) return false ; return METHOD_1 ( VAR_2 [ VAR_1 ] ) ; }
public synchronized void run ( ) { TYPE_1 . append ( ( VAR_3 + STRING_1 ) ) ; VAR_1 . METHOD_1 ( VAR_2 ) ; }
public int METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 . size ( ) ; } }
public synchronized boolean isEmpty ( TYPE_1 VAR_1 ) { return this . VAR_3 . get ( VAR_1 ) . isEmpty ( ) ; }
private synchronized void METHOD_1 ( ) { METHOD_3 ( ) ; if ( VAR_1 ) METHOD_4 ( ) ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; } return VAR_2 ; }
public synchronized TYPE_1 query ( java.lang.String sql ) throws TYPE_2 { TYPE_3 s = VAR_1 . METHOD_2 ( ) ; s . METHOD_3 ( sql ) ; return s . METHOD_4 ( ) ; }
private void METHOD_1 ( ) { this . VAR_1 = VAR_2 ; this . VAR_3 = VAR_4 ; this . VAR_5 = java.util.Collections . METHOD_2 ( new TYPE_1 < > ( ) ) ; this . VAR_6 = VAR_7 ; }
void METHOD_1 ( ) { if ( ( VAR_3 ) != ( VAR_1 ) ) { synchronized ( VAR_2 ) { METHOD_3 ( VAR_2 . METHOD_4 ( ) , VAR_2 . METHOD_5 ( ) ) ; } } }
private synchronized void METHOD_1 ( ) { while ( VAR_1 ) { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( ) { VAR_1 = false ; if ( ( VAR_2 ) != null ) { for ( TYPE_1 t : VAR_2 ) { t . METHOD_1 ( ) ; } VAR_3 . METHOD_1 ( ) ; } }
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { return events ; }
private void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( null != VAR_1 ) { VAR_2 . add ( VAR_1 ) ; } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_2 ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( VAR_2 ) ; } return VAR_1 ; }
public synchronized boolean METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . edit ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . commit ( ) ; return true ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . contains ( VAR_1 ) ) { VAR_3 . add ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; } }
public final native int METHOD_1 ( java.lang.String VAR_1 ) ;
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; }
private void METHOD_1 ( ) { try { synchronized ( this ) { this . METHOD_2 ( ) ; } } catch ( java.lang.Exception e ) { e . METHOD_3 ( ) ; } }
public java.lang.String METHOD_1 ( java.lang.String name ) { return VAR_1 . get ( name ) ; }
public synchronized boolean METHOD_1 ( int id , byte [ ] data , int length ) { return ( METHOD_1 ( id , data , length , true ) ) || ( METHOD_1 ( id , data , length , false ) ) ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_2 , STRING_1 ) ; METHOD_2 ( ) ; }
public static synchronized java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return TYPE_1 . METHOD_1 ( VAR_1 , false ) ; }
private synchronized TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( ) ; } return VAR_1 ; }
public static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i += 1 ) { VAR_1 . get ( i ) . update ( ) ; } }
public synchronized void METHOD_1 ( ) { METHOD_1 ( null , null ) ; }
private synchronized void METHOD_1 ( ) { }
public synchronized < TYPE_1 > void METHOD_1 ( TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_2 . METHOD_3 ( ) , VAR_2 ) ; }
public synchronized void set ( java.lang.String name , java.lang.String value ) { name = TYPE_1 . METHOD_1 ( name ) ; if ( ! ( TYPE_1 . isEmpty ( name ) ) ) VAR_1 . put ( name , value ) ; }
public final synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; }
public synchronized void close ( final TYPE_1 VAR_1 ) throws java.io.IOException { out . close ( ) ; }
private synchronized int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return TYPE_1 . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_1 , VAR_2 ) ) . size ( ) ; }
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) ) ; VAR_3 = true ; }
public synchronized void METHOD_1 ( ) throws TYPE_1 { while ( ! ( VAR_1 ) ) { METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 this , final long VAR_1 ) { METHOD_2 ( ) ; }
private boolean METHOD_1 ( TYPE_1 a ) { VAR_1 . METHOD_2 ( STRING_1 ) ; return false ; }
protected synchronized TYPE_1 METHOD_1 ( ) { TYPE_1 b = VAR_1 . METHOD_2 ( ) ; if ( VAR_1 . contains ( b ) ) { VAR_2 . METHOD_3 ( STRING_1 ) ; } return b ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = METHOD_2 ( VAR_1 ) ; } this . METHOD_3 ( VAR_1 ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) throws java.lang.Exception { if ( VAR_1 . isEmpty ( ) ) { return null ; } return VAR_1 . get ( VAR_2 ) ; }
private synchronized void METHOD_1 ( ) { VAR_1 . edit ( ) . METHOD_2 ( ) . apply ( ) ; }
public synchronized TYPE_1 get ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }
public static void METHOD_1 ( int index ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( index ) ; } }
public synchronized boolean METHOD_1 ( int VAR_1 ) { return ( ( VAR_2 ) >= VAR_1 ) && ( VAR_1 != 0 ) ; }
public java.lang.String METHOD_1 ( ) { synchronized ( VAR_3 ) { return VAR_1 [ VAR_2 ] ; } }
public synchronized void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . get ( VAR_1 ) . METHOD_3 ( VAR_2 ) ; ( VAR_5 ) ++ ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) . METHOD_3 ( VAR_4 ) . set ( VAR_5 . METHOD_4 ( ) , STRING_1 ) ; }
private void METHOD_1 ( ) { if ( VAR_1 ) return ; synchronized ( VAR_1 ) { if ( VAR_1 ) return ; VAR_1 = true ; } TYPE_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_2 ( ) ) ; }
public synchronized void METHOD_1 ( int index , TYPE_1 VAR_1 ) throws TYPE_2 { assert VAR_1 != null ; VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }
public float METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) { return VAR_2 . get ( VAR_1 ) ; } return 0 ; } }
private synchronized TYPE_1 < TYPE_2 > METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . METHOD_2 ( ) ; return VAR_1 ; } catch ( TYPE_3 e ) { e . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( STRING_1 ) ; return null ; } }
public synchronized void METHOD_1 ( ) { while ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_3 ( ) ; }
public static synchronized void set ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_1 ( ) . id = VAR_1 ; }
private synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = VAR_2 ; VAR_3 = VAR_4 ; }
public void METHOD_1 ( ) { if ( VAR_1 ) TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; synchronized ( VAR_3 ) { METHOD_3 ( TYPE_2 . METHOD_4 ( ) ) ; } }
public synchronized java.lang.String METHOD_1 ( ) { return VAR_2 ; }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( ) ; } }
public synchronized void close ( ) { this . METHOD_2 ( ) ; }
public static synchronized TYPE_1 get ( ) { return TYPE_2 . METHOD_1 ( ) . id ; }
public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; }
public static void METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_3 ) { if ( ! ( VAR_3 . contains ( VAR_1 ) ) ) { VAR_3 . add ( VAR_1 ) ; } } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; super . METHOD_1 ( ) ; synchronized ( VAR_2 ) { if ( ( VAR_2 ) == false ) { VAR_2 = true ; METHOD_3 ( ) ; } else { } } }
private synchronized void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { label . METHOD_2 ( true ) ; VAR_1 = true ; VAR_2 = false ; VAR_3 = new TYPE_1 ( this , STRING_1 ) ; VAR_3 . METHOD_1 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 e ) { VAR_2 [ e . METHOD_4 ( ) ] = true ; synchronized ( VAR_3 ) { VAR_3 . add ( e . METHOD_4 ( ) ) ; } }
short METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( new TYPE_1 ( null , ( ( VAR_2 ) + ( VAR_3 ) ) ) ) ; VAR_1 . METHOD_3 ( ) ; } return VAR_4 ; }
public static synchronized void set ( java.lang.String path , TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { java.util.Map < java.lang.String , TYPE_1 > VAR_2 = VAR_3 . get ( ) ; VAR_2 . put ( path , VAR_1 ) ; } }
public static synchronized int METHOD_1 ( ) { ( VAR_1 ) ++ ; VAR_1 = ( VAR_1 ) % INT_1 ; return VAR_1 ; }
public void METHOD_1 ( ) { synchronized ( this ) { VAR_1 = false ; if ( ! ( VAR_2 ) ) return ; VAR_2 = false ; } METHOD_2 ( TYPE_1 . METHOD_3 ( ) , true , false ) ; }
public TYPE_1 METHOD_1 ( ) { return VAR_3 . METHOD_2 ( ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; }
public final void METHOD_1 ( ) { synchronized ( this ) { VAR_1 = VAR_2 ; VAR_3 . info ( ( STRING_1 + ( VAR_4 ) ) ) ; this . METHOD_2 ( ) ; } }
protected static synchronized boolean METHOD_1 ( ) { if ( ( VAR_1 ) == ( VAR_2 ) ) return true ; return false ; }
public void run ( ) { if ( ! ( TYPE_1 . METHOD_1 ( ) . METHOD_2 ( ) ) ) { TYPE_2 VAR_1 = METHOD_3 ( ) ; synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; METHOD_4 ( ) ; METHOD_5 ( null ) ; } } }
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; }
public static synchronized void METHOD_1 ( TYPE_1 s ) { if ( ( VAR_1 ) == null ) { VAR_1 = s ; } else { VAR_1 . METHOD_2 ( s ) ; } }
public synchronized void METHOD_1 ( long VAR_1 ) throws java.lang.Exception { while ( ! ( VAR_2 . equals ( VAR_3 ) ) ) { this . METHOD_2 ( VAR_1 ) ; } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 . add ( VAR_1 ) ; this . VAR_4 . put ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) , VAR_1 ) ; }
public void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; METHOD_2 ( ) ; VAR_2 . METHOD_1 ( ) ; synchronized ( this ) { VAR_3 . METHOD_1 ( ) ; } } }
private void METHOD_1 ( final long VAR_1 , final TYPE_1 VAR_2 ) { if ( ( VAR_3 . put ( VAR_1 , VAR_2 ) ) != null ) { throw new TYPE_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; VAR_2 . add ( VAR_1 ) ; }
public boolean METHOD_1 ( int VAR_1 ) { synchronized ( VAR_2 ) { return true ; } }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 . METHOD_3 ( VAR_2 ) , new TYPE_3 ( ) ) ; }
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_3 = new TYPE_2 ( ) ; VAR_4 = new TYPE_3 ( this ) ; VAR_5 = new TYPE_4 ( this ) ; VAR_5 . METHOD_1 ( ) ; }
public boolean METHOD_1 ( ) { return ( ( VAR_2 ) && ( ( VAR_3 ) != null ) ) && ( ! ( VAR_3 . METHOD_2 ( ) ) ) ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_5 = null ; VAR_6 = null ; VAR_4 = null ; } }
private synchronized void METHOD_1 ( ) { while ( ( VAR_3 ) != 0 ) { try { METHOD_3 ( ) ; } catch ( TYPE_1 e ) { e . METHOD_4 ( ) ; } } }
protected void METHOD_1 ( int VAR_1 ) throws TYPE_1 { synchronized ( VAR_2 ) { if ( ( METHOD_2 ( ) ) < 1 ) { METHOD_3 ( VAR_1 ) ; } super . METHOD_1 ( VAR_1 ) ; } }
private synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; }
public synchronized TYPE_1 get ( ) throws TYPE_2 { while ( ! ( VAR_1 ) ) { METHOD_1 ( ) ; } return VAR_2 ; }
public void METHOD_1 ( TYPE_1 e ) { if ( VAR_1 ) { new TYPE_2 ( ( ) - > METHOD_2 ( ) ) . METHOD_3 ( ) ; } }
public synchronized void close ( ) { try { VAR_1 . close ( ) ; } catch ( java.io.IOException e ) { return ; } VAR_1 = null ; this . VAR_2 = null ; VAR_3 . METHOD_1 ( this . METHOD_2 ( ) ) ; }
private synchronized TYPE_1 METHOD_1 ( final float VAR_1 , final float VAR_2 ) throws TYPE_2 { return METHOD_1 ( null , VAR_1 , VAR_2 , false ) ; }
public synchronized void METHOD_1 ( final TYPE_1 < ? > VAR_1 ) { VAR_2 . add ( TYPE_2 . create ( VAR_1 , this ) ) ; }
public synchronized void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; }
protected void METHOD_1 ( java.lang.String line ) { synchronized ( VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 ) { VAR_3 . METHOD_2 ( this , line ) ; } } }
private boolean METHOD_1 ( int VAR_1 ) { synchronized ( VAR_3 ) { double VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; return VAR_2 > ( VAR_4 ) ; } }
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { synchronized ( this ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; } }
public final synchronized TYPE_1 METHOD_1 ( ) { final int index ; index = this . VAR_1 ; this . VAR_1 = ( index + 1 ) % ( this . VAR_2 ) ; return this . VAR_3 . get ( index ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 . get ( ) ) == null ) { VAR_2 . set ( VAR_1 . METHOD_2 ( this ) ) ; } }
public void METHOD_3 ( ) { TYPE_1 < TYPE_2 > VAR_1 = VAR_2 . get ( ) ; VAR_1 . METHOD_3 ( ) ; }
synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 { java.lang.String sql = ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_2 ) + STRING_3 ) + VAR_1 ) + STRING_4 ; VAR_3 . METHOD_3 ( sql ) ; }
private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) ) ; VAR_3 = false ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { return ( METHOD_3 ( ) ) && ( METHOD_2 ( VAR_1 ) ) ; } }
private synchronized void METHOD_1 ( char [ ] data ) { try { this . VAR_1 . METHOD_2 ( data ) ; this . VAR_1 . METHOD_3 ( ) ; } catch ( java.io.IOException e ) { e . METHOD_4 ( ) ; } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) VAR_1 = new TYPE_1 ( VAR_3 ) ; } return VAR_1 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { this . VAR_3 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this . VAR_2 ) { TYPE_2 . d ( STRING_1 , ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) + STRING_3 ) ) ; this . VAR_3 . METHOD_2 ( VAR_1 ) ; } }
synchronized void add ( TYPE_1 t ) { VAR_3 . add ( t ) ; }
private void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; }
protected long getValue ( ) { return VAR_4 . METHOD_3 ( ) ; }
public static synchronized int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_3 . add ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ) ; return VAR_2 ; }
static synchronized TYPE_1 get ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { throw new TYPE_3 ( STRING_1 ) ; } return VAR_2 ; }
private synchronized void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; final TYPE_1 VAR_2 = METHOD_3 ( VAR_3 , VAR_4 ) ; if ( VAR_2 != null ) { METHOD_2 ( VAR_2 . METHOD_4 ( ) ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { return ( VAR_1 ) != null ? VAR_1 : new TYPE_1 ( ( - 1 ) ) ; }
private void METHOD_1 ( TYPE_5 VAR_3 ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( VAR_3 ) ; try { VAR_2 = new TYPE_2 < TYPE_3 > ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_4 e ) { e . METHOD_4 ( ) ; } }
public synchronized void add ( final TYPE_1 VAR_1 ) { if ( this . VAR_2 . contains ( VAR_1 ) ) { return ; } this . VAR_2 . add ( VAR_1 ) ; METHOD_1 ( ) ; }
protected TYPE_1 METHOD_1 ( ) { return VAR_2 . get ( ) ; }
private synchronized void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { this . VAR_1 = true ; this . METHOD_2 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . add ( VAR_1 ) ; } }
public void METHOD_1 ( final boolean VAR_1 ) { synchronized ( VAR_5 ) { if ( VAR_1 ) { METHOD_1 ( ) ; } else { VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; } } }
private void METHOD_1 ( ) { synchronized ( VAR_2 ) { if ( ! ( VAR_1 . METHOD_2 ( false ) ) ) { VAR_2 . METHOD_3 ( ) ; } else { } } }
private synchronized void METHOD_1 ( ) { while ( ! ( VAR_1 . METHOD_2 ( ) . isEmpty ( ) ) ) METHOD_3 ( ) ; }
public final int METHOD_1 ( java.lang.String path ) { synchronized ( this ) { int res = METHOD_2 ( path ) ; METHOD_3 ( VAR_1 ) ; return res ; } }
public boolean METHOD_1 ( TYPE_1 e ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . size ( ) ) > ( VAR_2 ) ) { VAR_1 . METHOD_2 ( ) ; } return VAR_1 . METHOD_1 ( e ) ; } }
synchronized TYPE_1 METHOD_1 ( ) { return TYPE_2 . get ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_3 ) == ( VAR_4 ) ) { VAR_3 = VAR_5 ; } }
public int METHOD_1 ( ) { synchronized ( this ) { return VAR_1 ; } }
public synchronized void METHOD_1 ( TYPE_1 error ) { VAR_1 . METHOD_1 ( error ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( METHOD_2 ( ) , error ) ; } }
protected java.util.Set < TYPE_1 > METHOD_1 ( ) { synchronized ( this . VAR_1 ) { return new TYPE_3 ( this . VAR_1 . values ( ) ) ; } }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ! ( VAR_3 ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } return VAR_3 ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; TYPE_2 . METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ; }
public static TYPE_1 METHOD_1 ( ) { return TYPE_1 . singleton ; }
public synchronized double METHOD_1 ( ) { return VAR_1 ; }
public void METHOD_1 ( java.lang.String data ) { TYPE_1 r ; synchronized ( this ) { if ( ( VAR_1 ) != ( VAR_2 ) ) return ; r = VAR_3 ; } r . METHOD_1 ( data ) ; }
public void METHOD_1 ( ) { VAR_1 = false ; }
public synchronized TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_3 . put ( VAR_1 , METHOD_1 ( VAR_1 ) ) ; } return VAR_2 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 ; }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; }
public boolean METHOD_1 ( java.lang.String name ) { synchronized ( VAR_1 ) { return VAR_1 . METHOD_2 ( name ) ; } }
public synchronized java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( 0 ) ; }
public synchronized void METHOD_1 ( ) throws java.lang.Exception { while ( ! ( VAR_1 . equals ( VAR_2 ) ) ) { this . METHOD_2 ( ) ; } }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 ) ) { ( VAR_3 ) ++ ; VAR_4 . METHOD_2 ( ) ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; } } }
public < TYPE_1 extends TYPE_2 > TYPE_1 add ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) VAR_2 . add ( VAR_1 ) ; } return VAR_1 ; }
public void METHOD_1 ( ) throws java.io.IOException { if ( ( ( VAR_1 . METHOD_2 ( ) ) == 0 ) && ( VAR_2 . get ( ) ) ) { close ( ) ; synchronized ( VAR_3 ) { VAR_3 . METHOD_3 ( this ) ; } } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_3 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_3 ) ; } return VAR_2 ; }
private synchronized void METHOD_1 ( TYPE_1 update ) { if ( ( VAR_1 ) != null ) { VAR_1 . add ( update ) ; if ( ( VAR_1 . size ( ) ) > ( VAR_2 ) ) { update ( VAR_1 ) ; } } }
protected TYPE_2 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_3 { TYPE_2 VAR_2 = METHOD_2 ( VAR_1 ) ; TYPE_1 < TYPE_2 > out = new TYPE_1 < TYPE_2 > ( ) ; METHOD_3 ( VAR_2 , STRING_1 , out ) ; return out . get ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 msg ) { VAR_1 . add ( new TYPE_2 ( VAR_2 , msg . type ) ) ; }
private static TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 class ) { if ( ( VAR_2 ) == null ) { throw new TYPE_3 ( STRING_1 ) ; } else { return VAR_2 ; } } }
public synchronized void METHOD_1 ( final long VAR_1 ) { VAR_2 . METHOD_2 ( STRING_1 , VAR_1 ) ; METHOD_3 ( TYPE_1 . of ( VAR_3 ) , VAR_1 ) ; VAR_3 = VAR_1 ; }
public synchronized void METHOD_1 ( final TYPE_1 t ) { TYPE_2 . error ( STRING_1 , t ) ; ( VAR_1 ) ++ ; METHOD_3 ( ) ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; METHOD_3 ( ) ; }
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { return VAR_1 ; }
public synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = true ; this . VAR_3 . METHOD_1 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 msg ) { VAR_1 . METHOD_2 ( VAR_3 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } VAR_1 . METHOD_2 ( ) ; }
public static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( TYPE_2 ) { TYPE_2 . add ( VAR_1 ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; } TYPE_3 VAR_2 = new TYPE_3 ( METHOD_4 ( ) ) ; METHOD_5 ( VAR_2 ) ; return VAR_2 ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( ) ; } return VAR_2 ; }
public TYPE_1 METHOD_1 ( double VAR_1 ) { if ( ( VAR_2 ) != null ) synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } synchronized ( VAR_3 ) { VAR_3 = VAR_1 ; } return METHOD_2 ( ) ; }
protected synchronized void METHOD_1 ( TYPE_1 e ) { for ( TYPE_2 VAR_1 : VAR_2 ) { VAR_1 . METHOD_3 ( e ) ; } }
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; synchronized ( this ) { b . METHOD_2 ( ) ; b = null ; } }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_2 ( 0 , this . METHOD_3 ( ) ) ; this . METHOD_4 ( VAR_1 ) ; this . METHOD_5 ( 0 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_2 ( VAR_1 ) ) { VAR_2 . add ( VAR_1 ) ; } }
public boolean METHOD_1 ( ) { synchronized ( this ) { return ( METHOD_3 ( ) ) && ( METHOD_2 ( ) ) ; } }
public static synchronized void METHOD_1 ( TYPE_1 p ) { VAR_1 = p ; }
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_1 ) { return ( VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ) != null ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( ) ; if ( ( VAR_2 . contains ( VAR_1 ) ) == false ) { VAR_2 . add ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( ) { VAR_2 = VAR_1 ; }
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 . getStatus ( ) ) != ( VAR_2 ) ) VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( ) ; }
public boolean status ( ) { return status ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; } return VAR_2 ; }
private synchronized java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 != null ) { VAR_1 = VAR_1 . METHOD_2 ( STRING_1 , STRING_2 ) ; } VAR_2 = VAR_1 ; return VAR_2 ; }
public synchronized void close ( ) throws java.io.IOException { super . close ( ) ; boolean [ ] value = VAR_1 . get ( TYPE_1 . METHOD_1 ( this ) ) ; value [ 1 ] = true ; }
public TYPE_1 getMessage ( ) { synchronized ( VAR_1 ) { TYPE_1 m = VAR_1 . METHOD_1 ( ) ; return m ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( ) throws java.io.IOException { VAR_1 = false ; if ( ( VAR_2 ) != null ) VAR_2 . close ( ) ; VAR_3 . METHOD_2 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_3 . getId ( ) , VAR_1 ) ; }
public static void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < 0 ) { return ; } synchronized ( VAR_2 ) { VAR_3 = VAR_1 ; } synchronized ( VAR_4 ) { VAR_4 = TYPE_1 . format ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String server ) { VAR_2 . put ( VAR_1 , server ) ; }
public synchronized boolean contains ( final java.lang.String VAR_1 ) { return ( ( VAR_2 ) != null ) && ( VAR_2 . METHOD_3 ( VAR_1 ) ) ; }
public synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { synchronized ( this ) { TYPE_3 VAR_3 = METHOD_2 ( VAR_2 ) ; TYPE_1 data = TYPE_4 . METHOD_3 ( VAR_3 ) ; METHOD_4 ( ) ; return data ; } }
public static synchronized void METHOD_1 ( TYPE_2 VAR_2 ) { TYPE_1 . METHOD_2 ( VAR_2 ) . edit ( ) . METHOD_3 ( VAR_1 ) . apply ( ) ; }
public synchronized void run ( ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { return ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( VAR_5 ) ; } VAR_2 . METHOD_2 ( VAR_3 ) ; }
public void METHOD_1 ( ) { for ( TYPE_1 server : VAR_1 ) { server . METHOD_2 ( ) ; server . close ( ) ; } }
public void METHOD_1 ( ) { VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; synchronized ( VAR_2 ) { VAR_3 = null ; TYPE_2 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_2 ( STRING_1 ) ; } VAR_2 . METHOD_2 ( VAR_1 ) ; }
void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( double VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; return VAR_2 ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; }
public synchronized void close ( ) throws TYPE_1 { super . close ( ) ; this . VAR_1 . METHOD_1 ( ) ; }
public void METHOD_1 ( final TYPE_1 VAR_1 ) { synchronized ( this ) { VAR_2 . add ( VAR_1 ) ; } VAR_1 . METHOD_2 ( this ) ; }
public synchronized void METHOD_1 ( java.lang.String log ) { VAR_1 . append ( log ) ; VAR_2 . METHOD_5 ( log ) ; }
private synchronized void METHOD_1 ( long [ ] VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . add ( INT_1 ) ; for ( long value : VAR_1 ) { VAR_2 . add ( value ) ; } }
public synchronized boolean METHOD_1 ( TYPE_1 key ) { if ( ! ( VAR_1 . METHOD_2 ( key ) ) ) { return false ; } METHOD_3 ( VAR_1 . get ( key ) ) ; VAR_1 . METHOD_1 ( key ) ; return true ; }
public synchronized void METHOD_1 ( java.util.ArrayList < java.lang.String > VAR_1 ) { if ( ( VAR_1 != null ) && ( ( VAR_1 . size ( ) ) > 0 ) ) { VAR_4 . METHOD_2 ( VAR_1 ) ; VAR_3 = true ; } }
public synchronized java.lang.String METHOD_1 ( final TYPE_1 VAR_1 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( ( this . VAR_2 ) ++ ) ) ; synchronized ( this . VAR_3 ) { ( this . VAR_3 ) ++ ; } }
public void put ( final TYPE_1 key , TYPE_2 event ) { synchronized ( this ) { event . METHOD_2 ( VAR_1 ) ; } }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 ) ) { TYPE_2 . create ( ) ; } if ( VAR_1 == null ) { VAR_3 = VAR_4 ; } synchronized ( VAR_3 ) { VAR_3 = VAR_1 ; } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }
public final TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; for ( TYPE_2 e : VAR_2 ) { VAR_1 . add ( e . METHOD_2 ( ) ) ; } return VAR_1 ; }
public void METHOD_1 ( TYPE_1 t ) { error = t ; VAR_1 = true ; VAR_3 . METHOD_1 ( t ) ; }
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }
public final java.util.Set < java.lang.String > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
public void METHOD_1 ( TYPE_1 key ) { synchronized ( this ) { this . key = key ; METHOD_2 ( ) ; } }
private static synchronized int METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; return TYPE_3 . METHOD_3 ( ) ; }
public TYPE_1 METHOD_1 ( long VAR_1 ) { synchronized ( VAR_2 ) { METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( ) ) return null ; TYPE_1 VAR_4 = TYPE_2 . METHOD_3 ( VAR_1 ) ; return VAR_4 ; } }
public synchronized void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { METHOD_2 ( ) ; VAR_2 = VAR_2 . METHOD_3 ( ) ; } }
public int METHOD_1 ( ) { int VAR_1 = 0 ; synchronized ( VAR_2 ) { for ( TYPE_1 p : VAR_2 ) if ( p . METHOD_2 ( ) ) ++ VAR_1 ; } return VAR_1 ; }
public synchronized boolean METHOD_1 ( ) { ( VAR_1 ) ++ ; if ( ( ( VAR_2 ) != 0 ) && ( ( VAR_1 ) <= ( VAR_2 ) ) ) { return true ; } else return false ; }
public static void METHOD_1 ( ) { synchronized ( VAR_1 . events ) { VAR_2 = false ; VAR_1 . events = VAR_3 ; VAR_3 = null ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) { VAR_1 . METHOD_2 ( VAR_6 [ VAR_7 ] . METHOD_3 ( ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 , null ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; java.util.Set < TYPE_1 > p = plugins ; if ( p != null ) p . METHOD_2 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( int VAR_1 , int VAR_2 ) { VAR_4 . METHOD_3 ( STRING_2 , VAR_1 , VAR_2 , VAR_5 ) ; VAR_4 . METHOD_4 ( ) ; return ; }
public synchronized void METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_1 . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; synchronized ( VAR_2 ) { VAR_2 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 error ) { this . error = error ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { TYPE_2 VAR_2 ; synchronized ( VAR_3 ) { VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; } if ( VAR_2 != null ) { VAR_2 . set ( VAR_1 ) ; } }
public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != VAR_1 ) { synchronized ( this ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) return VAR_1 ; } } return METHOD_3 ( ) ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } } }
public static synchronized void METHOD_1 ( int VAR_1 ) { if ( VAR_1 > ( - 1 ) ) { VAR_2 . add ( VAR_1 ) ; } }
private synchronized void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this ) . METHOD_2 ( this ) . METHOD_3 ( this ) . METHOD_4 ( VAR_2 ) . METHOD_5 ( this , this ) . METHOD_6 ( ) ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { VAR_3 = null ; METHOD_2 ( VAR_2 ) ; } else { VAR_3 = VAR_1 . METHOD_3 ( ) ; } }
public synchronized TYPE_1 get ( ) throws TYPE_2 { while ( VAR_1 . isEmpty ( ) ) METHOD_1 ( ) ; return VAR_1 . METHOD_2 ( 0 ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 = true ; }
public static TYPE_1 METHOD_1 ( ) { synchronized ( VAR_2 ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }
protected static synchronized void METHOD_1 ( ) { VAR_1 = VAR_2 ; }
public synchronized void METHOD_1 ( int value ) { if ( value != ( VAR_1 ) ) { VAR_1 = METHOD_2 ( value ) ; } }
public synchronized double METHOD_1 ( ) { return - ( values [ 1 ] ) ; }
public synchronized void METHOD_1 ( long VAR_1 ) { VAR_2 . add ( VAR_1 ) ; }
private synchronized void METHOD_1 ( ) { VAR_1 = true ; if ( ( VAR_3 ) > 0 ) { VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 ) ; } }
public void METHOD_1 ( ) { synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( ) ; } }
public void METHOD_1 ( TYPE_1 < ? > VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; } }
public static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_2 ( VAR_1 ) ; } }
private void METHOD_1 ( ) { TYPE_1 VAR_1 = null ; synchronized ( this ) { VAR_1 = VAR_2 ; } if ( VAR_1 != null ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_2 VAR_3 ) { } } }
public synchronized void METHOD_1 ( ) { TYPE_1 . d ( VAR_1 , STRING_1 ) ; VAR_2 = this ; VAR_3 = new TYPE_2 ( STRING_2 , STRING_3 ) ; }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
private synchronized void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ( ( VAR_2 ) + VAR_1 ) ) ; }
public static void put ( final TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_3 . add ( VAR_1 ) ; VAR_2 . METHOD_1 ( ) ; } }
public synchronized void METHOD_1 ( ) { for ( TYPE_1 < java.lang.String , TYPE_2 > VAR_1 : VAR_2 . METHOD_2 ( ) ) { if ( ! ( VAR_1 . getValue ( ) ) ) { VAR_3 = false ; return ; } } VAR_3 = true ; }
private synchronized void METHOD_1 ( byte s ) { VAR_1 = s ; }
protected synchronized void METHOD_1 ( TYPE_1 id , float VAR_1 , boolean VAR_2 ) { VAR_3 . put ( id , VAR_1 , VAR_2 ) ; }
public synchronized boolean METHOD_1 ( ) { return ( VAR_1 ) <= FLOAT_1 ; }
public TYPE_1 < TYPE_2 , TYPE_2 > METHOD_1 ( ) { return VAR_2 ; }
public static synchronized void METHOD_1 ( ) { VAR_2 = true ; }
public synchronized void event ( ) { if ( ! ( VAR_1 ) ) { VAR_2 = true ; METHOD_1 ( STRING_1 ) ; } VAR_1 = false ; }
protected int METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 . size ( ) ; } }
public synchronized boolean METHOD_1 ( ) { if ( VAR_1 ) return false ; if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_1 ( this ) ; VAR_1 = true ; VAR_2 . METHOD_1 ( ) ; return true ; }
public TYPE_1 append ( final java.lang.String s ) { synchronized ( VAR_1 ) { if ( s != null ) { VAR_1 . add ( s ) ; } } return this ; }
public synchronized void METHOD_1 ( double VAR_1 ) { VAR_3 = VAR_1 ; VAR_4 = true ; this . METHOD_3 ( ) ; }
public void METHOD_1 ( ) { if ( VAR_1 ) { synchronized ( VAR_2 ) { VAR_3 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 = null ; } VAR_1 = false ; } }
public synchronized void METHOD_1 ( int w , int VAR_1 ) { VAR_2 . METHOD_2 ( w ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; update ( ) ; }
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { synchronized ( this ) { VAR_1 . METHOD_1 ( ) ; VAR_1 = null ; VAR_2 = null ; } } }
public void METHOD_1 ( ) throws java.io.IOException { synchronized ( VAR_1 ) { VAR_2 . commit ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . commit ( ) ; METHOD_3 ( ) ; } }
private boolean METHOD_1 ( ) { synchronized ( this ) { return ( ( VAR_1 ) + ( ( 1 * INT_2 ) * INT_3 ) ) < ( TYPE_1 . METHOD_2 ( ) ) ; } }
public synchronized void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { boolean VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 ) METHOD_3 ( VAR_2 ) ; }
public final void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_3 ( VAR_1 ) ; }
public static boolean METHOD_1 ( final java.lang.String name ) { for ( TYPE_1 p : VAR_1 ) { if ( p . getName ( ) . equals ( name ) ) { return true ; } } return false ; }
public void METHOD_1 ( long VAR_1 ) throws TYPE_1 , TYPE_2 { synchronized ( VAR_2 ) { if ( ! ( set ) ) VAR_2 . METHOD_2 ( VAR_1 ) ; if ( ! ( set ) ) throw new TYPE_2 ( ) ; } }
protected synchronized void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) . METHOD_5 ( VAR_2 ) . METHOD_3 ( this ) . METHOD_4 ( this ) . METHOD_6 ( ) ; }
private synchronized void METHOD_1 ( ) { TYPE_1 . m ( VAR_1 , STRING_1 ) ; if ( VAR_2 ) { VAR_2 = false ; METHOD_2 ( ) ; VAR_3 . METHOD_1 ( ) ; } }
public void METHOD_1 ( final TYPE_1 event ) { synchronized ( VAR_1 ) { METHOD_1 ( event , VAR_2 ) ; } }
public final void METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_5 ( ) ) ; try { TYPE_1 . METHOD_3 ( ) ; } catch ( java.io.IOException e ) { e . METHOD_4 ( ) ; } } }
protected synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) . METHOD_3 ( this ) . METHOD_4 ( this ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; } }
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }
public void METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } }
protected void METHOD_1 ( TYPE_1 message ) throws TYPE_2 { synchronized ( VAR_1 ) { while ( ( VAR_1 . size ( ) ) >= ( VAR_2 ) ) VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( message ) ; VAR_1 . METHOD_4 ( ) ; } }
public void METHOD_1 ( java.lang.String name ) { VAR_1 . METHOD_2 ( name ) ; METHOD_3 ( STRING_1 , name ) ; }
public final int METHOD_1 ( java.lang.String path ) { synchronized ( this ) { int res = METHOD_2 ( path ) ; if ( ( VAR_1 ) != null ) { METHOD_3 ( VAR_1 ) ; } return res ; } }
public static synchronized TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return TYPE_3 . METHOD_2 ( ) . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 user ) { VAR_2 . METHOD_1 ( new TYPE_3 ( VAR_1 , user ) ) ; }
public synchronized void METHOD_1 ( boolean VAR_1 ) { if ( ! VAR_1 ) { this . METHOD_2 ( ) ; } this . VAR_1 = VAR_1 ; }
public synchronized TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( ) { return new TYPE_1 ( VAR_1 ) ; }
public static java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; } } } return VAR_1 ; }
public synchronized int METHOD_1 ( byte [ ] b , int VAR_3 , int VAR_4 ) { if ( VAR_4 >= INT_1 ) return super . METHOD_1 ( b , VAR_3 , INT_1 ) ; else return super . METHOD_1 ( b , VAR_3 , VAR_4 ) ; }
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { synchronized ( this ) { java.util.Collections . METHOD_3 ( VAR_1 ) ; this . VAR_1 = java.util.Collections . METHOD_2 ( new TYPE_2 < > ( VAR_1 ) ) ; } }
public synchronized void METHOD_1 ( byte [ ] VAR_1 ) { METHOD_1 ( TYPE_1 . METHOD_2 ( VAR_1 , 0 ) ) ; }
public synchronized void METHOD_1 ( byte [ ] VAR_1 ) { VAR_2 = ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; }
public boolean METHOD_1 ( ) { synchronized ( this ) { if ( ! ( VAR_1 ) ) VAR_1 = true ; else throw new TYPE_1 ( ) ; } return VAR_1 ; }
public boolean METHOD_1 ( ) { return this . server . METHOD_1 ( ) ; }
protected synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . METHOD_2 ( ) , new TYPE_2 < TYPE_1 > ( VAR_1 ) ) ; }
synchronized TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) return null ; VAR_4 . put ( VAR_3 . METHOD_2 ( ) , VAR_3 ) ; return VAR_3 ; }
public void METHOD_1 ( final java.lang.String message ) { for ( TYPE_1 server : VAR_1 ) { server . METHOD_2 ( message ) ; server . close ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 , java.lang.String message ) { VAR_1 . METHOD_4 ( VAR_3 , VAR_4 , this ) ; METHOD_3 ( message ) ; METHOD_5 ( ) ; METHOD_2 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 message ) { try { VAR_1 . METHOD_2 ( message ) ; VAR_1 . METHOD_3 ( ) ; } catch ( java.io.IOException e ) { e . METHOD_4 ( ) ; } }
public synchronized boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ( ( VAR_1 ) - ( VAR_2 ) ) ) ) <= FLOAT_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . getId ( ) , VAR_1 ) ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . add ( VAR_1 ) ; return true ; } return false ; } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ! ( TYPE_3 . METHOD_2 ( ) ) ) { TYPE_3 . METHOD_4 ( ) ; } return new TYPE_1 ( VAR_2 , VAR_1 ) ; }
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } super . METHOD_1 ( ) ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; super . METHOD_1 ( ) ; }
public final void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 id ) { synchronized ( VAR_2 ) { if ( ! ( VAR_2 . contains ( VAR_1 ) ) ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } } }
public synchronized void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; if ( VAR_1 != null ) { TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( METHOD_5 ( ) , this ) ) ; } super . METHOD_1 ( ) ; }
public static synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 < TYPE_2 > VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 ) ; TYPE_5 . METHOD_3 ( VAR_1 , VAR_3 , null ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_1 . METHOD_2 ( VAR_4 [ VAR_5 ] . METHOD_3 ( ) , VAR_2 , VAR_3 , null ) ; }
public synchronized void METHOD_1 ( double VAR_1 ) { this . VAR_1 += VAR_1 ; this . VAR_1 = TYPE_1 . METHOD_2 ( this . VAR_1 , 0 , VAR_2 ) ; }
public int METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws TYPE_1 { synchronized ( VAR_3 ) { if ( ( VAR_4 . get ( VAR_1 ) ) != null ) { return VAR_4 . get ( VAR_1 ) ; } return 0 ; } }
public synchronized void METHOD_1 ( TYPE_1 t ) { METHOD_2 ( t . getMessage ( ) ) ; }
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , VAR_4 ) ; TYPE_1 VAR_5 = new TYPE_3 ( this , VAR_6 , VAR_1 , VAR_3 ) ; return VAR_5 ; }
public synchronized void METHOD_1 ( ) { if ( VAR_2 ) { return ; } this . VAR_2 = true ; VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_1 ( ) ; }
private synchronized void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 != null ) VAR_2 . METHOD_2 ( ) ; } } }
public synchronized void METHOD_1 ( ) { this . METHOD_2 ( ) ; }
public synchronized int METHOD_1 ( ) { return VAR_1 . size ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { synchronized ( VAR_3 ) { for ( TYPE_4 VAR_4 : VAR_3 . values ( ) ) { VAR_4 . METHOD_1 ( VAR_1 , VAR_2 ) ; } } }
public synchronized boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( STRING_1 ) . equals ( STRING_2 ) ; }
public void run ( ) { TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) ; synchronized ( VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 ) { VAR_2 . METHOD_3 ( ) ; } } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_3 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; }
public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_2 ) { return VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ; } }
public synchronized void METHOD_1 ( ) { VAR_1 = true ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public static java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = new java.util.ArrayList < > ( VAR_2 ) ; } return VAR_1 ; }
private static synchronized TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { VAR_2 = VAR_1 ; VAR_3 . factory = new TYPE_1 ( VAR_1 ) ; return VAR_3 . factory ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 . values ( ) ; } }
private TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) == null ) { try { METHOD_2 ( ) ; } catch ( java.lang.Exception e ) { TYPE_2 . e ( e , STRING_1 ) ; } } return VAR_2 ; } }
protected synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( this . METHOD_2 ( ) ) . METHOD_3 ( this ) . METHOD_4 ( this ) . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; } }
public synchronized boolean METHOD_1 ( ) { if ( ( VAR_2 ) == null ) { return false ; } return ! ( VAR_1 . contains ( VAR_2 ) ) ; }
private static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_3 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_3 . METHOD_2 ( ) , ( ( INT_1 * INT_2 ) * INT_2 ) ) ; } return VAR_2 ; }
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { METHOD_1 ( METHOD_2 ( VAR_1 ) , VAR_2 ) ; }
public synchronized void METHOD_1 ( TYPE_1 this , final long VAR_1 ) { }
public boolean METHOD_1 ( ) { synchronized ( this ) { return VAR_1 ; } }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_3 ( VAR_1 ) ; METHOD_4 ( METHOD_5 ( VAR_1 ) ) ; }
public int METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; return METHOD_3 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 = VAR_2 . METHOD_4 ( ) ; VAR_6 = VAR_2 . METHOD_5 ( ) ; }
public synchronized void METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { VAR_3 . get ( VAR_1 ) . METHOD_2 ( VAR_2 ) ; }
private void METHOD_1 ( TYPE_1 event ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( event . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( null ) ; } }
public synchronized java.lang.String METHOD_1 ( ) { java.lang.String VAR_1 = null ; if ( VAR_2 ) { VAR_1 = VAR_3 . METHOD_2 ( ) ; if ( VAR_3 . isEmpty ( ) ) { VAR_2 = false ; } } return VAR_1 ; }
public synchronized void METHOD_1 ( java.lang.String projectName , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { if ( VAR_3 > 0 ) super . METHOD_1 ( projectName , VAR_1 , VAR_2 , ( STRING_1 + VAR_3 ) ) ; }
public boolean add ( TYPE_1 key , TYPE_1 value ) { VAR_2 . put ( key , value ) ; ( size ) ++ ; return ( VAR_2 . size ( ) ) >= ( VAR_3 ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 = false ; try { VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; } TYPE_2 . METHOD_4 ( 1 ) ; }
public synchronized void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; }
private synchronized void METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_1 . length ( ) ) < INT_1 ) { } else { ( VAR_2 ) ++ ; VAR_3 . add ( VAR_1 ) ; } }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( this . METHOD_2 ( VAR_1 ) ) { return false ; } VAR_2 . METHOD_3 ( this ) ; return true ; }
synchronized void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { VAR_1 . METHOD_2 ( 0 ) . METHOD_3 ( ) ; } METHOD_4 ( ) ; }
public synchronized int METHOD_1 ( ) { return VAR_1 . get ( ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) { org.junit.Assert . METHOD_2 ( ( ( VAR_1 ) != null ) ) ; if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( ) ; } return VAR_2 ; }
public void METHOD_1 ( TYPE_1 m ) { synchronized ( VAR_1 ) { VAR_1 . add ( m ) ; VAR_1 . METHOD_2 ( ) ; } }
public synchronized void put ( java.lang.String message ) { while ( ! ( VAR_1 ) ) { try { METHOD_1 ( ) ; } catch ( TYPE_1 e ) { } } VAR_1 = false ; this . message = message ; METHOD_2 ( ) ; }
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( ) { if ( VAR_1 ) TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; synchronized ( VAR_3 ) { METHOD_3 ( TYPE_2 . METHOD_4 ( ) , null ) ; } }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { return ; } VAR_1 = VAR_7 ; VAR_3 . METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { }
protected synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; synchronized ( VAR_1 ) { VAR_2 = false ; VAR_1 . METHOD_2 ( ) ; } }
public void METHOD_5 ( ) { VAR_2 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { VAR_3 = VAR_1 ; VAR_4 . METHOD_3 ( VAR_3 ) ; } }
public int METHOD_1 ( ) { synchronized ( VAR_1 ) { return 0 ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < java.lang.String , TYPE_2 > VAR_2 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } }
private synchronized void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 ) ) { VAR_1 . METHOD_3 ( STRING_3 ) ; VAR_2 . METHOD_4 ( VAR_2 ) ; } }
public synchronized void METHOD_1 ( java.lang.String s ) { METHOD_2 ( s ) ; }
public synchronized void METHOD_1 ( java.lang.String message ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . add ( message ) ; }
public static TYPE_1 METHOD_1 ( TYPE_2 file ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( file ) ; } return VAR_1 ; }
public void METHOD_1 ( ) { this . VAR_1 . METHOD_2 ( ) . METHOD_3 ( this . VAR_2 . METHOD_2 ( ) ) ; this . VAR_1 . METHOD_4 ( ) ; METHOD_4 ( ) ; }
synchronized void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }
public TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }
public synchronized boolean METHOD_1 ( ) { return this . VAR_1 ; }
protected synchronized void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { ( VAR_3 ) -- ; } }
public static synchronized void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
public synchronized java.util.Set < TYPE_1 > METHOD_1 ( ) { return this . VAR_1 ; }
public synchronized java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return ( VAR_1 ) == null ? new TYPE_1 < java.lang.String , java.lang.String > ( ) : VAR_1 ; }
public synchronized TYPE_1 METHOD_1 ( int type ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) ; return VAR_1 ; }
public synchronized TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_2 . Project p = METHOD_2 ( VAR_1 ) ; if ( p != null ) { return METHOD_3 ( p . getId ( ) ) ; } else { return new TYPE_1 ( ) ; } }
public void METHOD_1 ( ) { VAR_2 . METHOD_2 ( ) ; }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { -- ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) . add ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { for ( TYPE_2 < TYPE_1 > VAR_3 : VAR_2 ) { if ( ( VAR_3 . get ( ) ) == VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; break ; } } } }
public void METHOD_1 ( ) { synchronized ( VAR_3 ) { METHOD_1 ( VAR_1 , 0 ) ; METHOD_1 ( VAR_2 , 1 ) ; VAR_3 . METHOD_2 ( ) ; } }
protected void METHOD_1 ( ) { synchronized ( VAR_3 ) { while ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 ) ) ) ; try { VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } } }
public synchronized void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 = 0 ; METHOD_3 ( ( - 1 ) ) ; VAR_3 . METHOD_2 ( ) ; }
void METHOD_1 ( ) { synchronized ( this ) { TYPE_1 . METHOD_2 ( ( ( ( STRING_1 + ( METHOD_3 ( VAR_1 ) ) ) + STRING_2 ) + ( VAR_2 ) ) ) ; } METHOD_4 ( VAR_3 ) ; }
public void run ( ) { synchronized ( this ) { try { r . run ( ) ; } finally { VAR_1 = null ; } } }
public void METHOD_1 ( ) throws TYPE_1 { }
public synchronized void close ( ) { if ( ( ++ ( VAR_1 ) ) == 2 ) { VAR_3 . METHOD_2 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_3 ( VAR_1 ) ; }
public int METHOD_1 ( ) { VAR_1 = ( VAR_1 ) + 1 ; if ( ( VAR_1 ) > ( VAR_2 ) ) { VAR_1 = VAR_3 ; } METHOD_2 ( ) ; return VAR_1 ; }
protected void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { synchronized ( VAR_2 ) { if ( ! ( VAR_1 ) ) { METHOD_2 ( VAR_2 , VAR_3 ) ; } } } }
public TYPE_1 [ ] METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ 0 ] ) ; } }
public static void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; synchronized ( VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_3 ) VAR_4 . METHOD_5 ( VAR_2 ) ; } } }
public synchronized void METHOD_1 ( TYPE_1 user ) { TYPE_2 VAR_1 = METHOD_2 ( user ) ; synchronized ( this ) { if ( VAR_1 != null ) { VAR_1 . METHOD_3 ( null ) ; return ; } } }
public synchronized boolean METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = VAR_4 . edit ( ) ; VAR_3 . METHOD_2 ( VAR_1 , VAR_2 . toString ( ) ) ; VAR_3 . commit ( ) ; return true ; }
public static synchronized TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_1 ) == 0 ) VAR_2 = VAR_3 . METHOD_2 ( ) ; ( VAR_1 ) ++ ; return VAR_2 ; }
public void METHOD_1 ( double VAR_1 , double VAR_2 ) { this . METHOD_2 ( ) ; this . METHOD_4 ( VAR_1 , VAR_2 ) ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; }
TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { if ( METHOD_2 ( ) ) { synchronized ( VAR_1 ) { return METHOD_3 ( VAR_1 ) ; } } return METHOD_3 ( VAR_1 ) ; }
public void METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 message = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( message != null ) { VAR_2 . METHOD_3 ( message ) ; } }
public boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; return ! ( VAR_1 . isEmpty ( ) ) ; } }
public int METHOD_1 ( ) { int i ; synchronized ( this ) { i = ( VAR_1 ) ++ ; if ( ( VAR_1 ) > INT_1 ) { VAR_1 = 0 ; } } return i ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_3 ) ; }
private synchronized double METHOD_1 ( java.lang.String VAR_1 ) { double VAR_2 = VAR_3 . get ( VAR_1 ) ; double VAR_4 = VAR_5 . get ( VAR_1 ) . size ( ) ; return VAR_4 / VAR_2 ; }
public boolean contains ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { return VAR_2 . METHOD_1 ( VAR_1 ) ; } }
protected void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return ; VAR_1 = false ; synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } }
public synchronized void close ( boolean VAR_1 ) throws java.lang.Exception { if ( VAR_1 ) { VAR_2 = false ; } else { VAR_3 . METHOD_1 ( VAR_4 ) ; VAR_5 = false ; } METHOD_2 ( VAR_3 ) ; }
protected abstract long getValue ( ) ;
public void METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_2 VAR_2 ) { synchronized ( VAR_3 ) { VAR_3 . put ( VAR_1 , VAR_2 ) ; } }
private void METHOD_1 ( ) { synchronized ( VAR_2 ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ( ( ( TYPE_2 . toString ( VAR_3 ) ) + CHAR_1 ) + ( VAR_4 ) ) ) ; } } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
public void METHOD_1 ( ) { for ( int i = 0 ; i < ( size ) ; i ++ ) { VAR_1 . set ( i , null ) ; } }
public synchronized void METHOD_1 ( java.lang.String message ) { if ( ( this . VAR_1 ) == null ) { return ; } this . VAR_1 . METHOD_2 ( message . METHOD_3 ( ) ) ; }
public final synchronized void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { return ; } METHOD_2 ( false ) ; TYPE_1 . METHOD_3 ( VAR_3 ) ; VAR_2 = false ; VAR_1 = false ; }
public boolean isEmpty ( ) { synchronized ( VAR_1 ) { return VAR_1 . isEmpty ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { METHOD_1 ( VAR_1 , VAR_2 . METHOD_3 ( ) ) ; }
public void METHOD_1 ( TYPE_1 e ) { synchronized ( VAR_1 ) { key = e . METHOD_3 ( ) ; VAR_2 = false ; VAR_1 . METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( ) { try { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( 1 ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( ) ; } }
public static void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_1 ( ) ; VAR_2 = false ; VAR_3 = false ; } }
public static boolean METHOD_1 ( int id ) { synchronized ( VAR_1 ) { id = TYPE_1 . METHOD_2 ( id ) ; return id < ( VAR_2 . size ( ) ) ; } }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } VAR_2 = VAR_3 ; }
private synchronized void METHOD_1 ( TYPE_3 < TYPE_1 , ? > VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; }
public boolean isEmpty ( ) { assert TYPE_1 . METHOD_1 ( this ) ; synchronized ( VAR_1 ) { return ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) == 0 ; } }
protected void METHOD_1 ( TYPE_1 result ) { if ( ! result ) { synchronized ( VAR_1 ) { TYPE_2 . d ( STRING_1 , STRING_2 ) ; VAR_2 = false ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 = VAR_4 ; VAR_6 = VAR_7 ; } } }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } synchronized ( VAR_2 ) { int index = 1 ; for ( TYPE_1 VAR_3 : VAR_2 ) { METHOD_3 ( VAR_3 , index ) ; ++ index ; } } }
public static void METHOD_1 ( ) { java.util.Collections . METHOD_2 ( VAR_2 ) ; }
private static synchronized TYPE_1 METHOD_1 ( ) { VAR_1 = ( ( VAR_1 ) == ( VAR_2 ) ) ? 0 : ( VAR_1 ) + 1 ; return new TYPE_1 ( VAR_1 ) ; }
public void METHOD_1 ( int w , int VAR_1 ) { synchronized ( VAR_2 ) { TYPE_1 . METHOD_2 ( w , VAR_1 , TYPE_1 . METHOD_3 ( w , VAR_1 ) ) ; } }
protected void METHOD_1 ( ) { synchronized ( VAR_1 ) { try { VAR_1 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_1 e ) { } } }
public static TYPE_1 METHOD_1 ( ) throws java.io.IOException { synchronized ( VAR_1 ) { if ( ( TYPE_1 . singleton ) == null ) TYPE_1 . singleton = new TYPE_1 ( null ) ; return TYPE_1 . singleton ; } }
synchronized boolean METHOD_1 ( ) { boolean result = VAR_2 ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_1 ( false ) ; VAR_3 = null ; VAR_2 = false ; return result ; }
public synchronized void METHOD_1 ( ) { TYPE_1 VAR_2 = new TYPE_1 ( this , STRING_1 ) ; VAR_2 . METHOD_1 ( ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( this ) { return new TYPE_1 < TYPE_2 > ( this . VAR_1 ) ; } }
public void METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { VAR_4 = VAR_1 ; VAR_5 = VAR_2 ; VAR_6 = VAR_6 . METHOD_2 ( VAR_6 , VAR_1 , VAR_2 , true ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; }
public void run ( ) { TYPE_1 . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( ) ; synchronized ( VAR_2 ) { for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( ) ; } } }
public void METHOD_1 ( ) throws java.io.IOException { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; } } }
public final synchronized TYPE_1 METHOD_1 ( ) { final TYPE_1 result = VAR_1 ; METHOD_2 ( result ) ; return result ; }
public synchronized boolean METHOD_1 ( TYPE_1 user ) { return false ; }
public void METHOD_1 ( ) { server . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 . get ( ) . METHOD_1 ( ) ; }
public synchronized void METHOD_1 ( int VAR_1 ) { VAR_2 += VAR_1 ; VAR_3 . METHOD_2 ( ( ( STRING_1 + ( ( VAR_2 ) / ( INT_1 * INT_1 ) ) ) + STRING_2 ) ) ; }
TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 ; synchronized ( VAR_3 ) { VAR_2 = VAR_3 . get ( VAR_1 ) ; } if ( VAR_2 == null ) { TYPE_2 . log ( VAR_4 , STRING_1 , VAR_1 ) ; } return VAR_2 ; }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 ) { synchronized ( VAR_3 ) { return VAR_3 . get ( TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) ; } }
public synchronized double METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; VAR_2 = false ; return VAR_3 ; }
protected synchronized void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { if ( VAR_2 == ( VAR_3 ) ) { VAR_4 = true ; VAR_5 = VAR_1 ; if ( ( VAR_6 ) != null ) VAR_6 . METHOD_2 ( ) ; } }
public boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { return ! ( VAR_1 . isEmpty ( ) ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_4 ( ) ; }
public void METHOD_1 ( ) { if ( VAR_1 ) { synchronized ( this ) { if ( VAR_1 ) { VAR_1 = false ; METHOD_2 ( ) ; } } } }
public synchronized TYPE_1 [ ] METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) . METHOD_2 ( ) . METHOD_3 ( new TYPE_1 [ VAR_2 . get ( VAR_1 ) . size ( ) ] ) ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 VAR_2 ) { VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_1 . METHOD_2 ( VAR_3 ) ) { ( VAR_4 ) -- ; VAR_5 = ( VAR_4 ) > 0 ; } } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; assert ! ( VAR_2 . contains ( VAR_1 ) ) ; }
public static TYPE_1 METHOD_1 ( ) { return VAR_3 . get ( ) ; }
public void METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } } }
public final synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { this . METHOD_2 ( VAR_2 ) ; this . METHOD_3 ( VAR_4 , VAR_4 , VAR_5 , VAR_4 ) ; this . VAR_6 . add ( VAR_1 ) ; }
private synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int VAR_2 = METHOD_2 ( ) ; VAR_3 . put ( VAR_2 , new TYPE_3 . Account ( VAR_2 ) ) ; TYPE_4 VAR_4 = new TYPE_4 ( VAR_2 ) ; return VAR_4 ; }
public java.lang.String METHOD_1 ( ) { if ( ( TYPE_1 . isEmpty ( VAR_2 ) ) && ( ( VAR_3 ) != null ) ) { VAR_2 = VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; } return VAR_2 ; }
public synchronized void METHOD_1 ( ) { TYPE_1 . d ( VAR_1 , ( STRING_2 + ( TYPE_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
public synchronized void METHOD_1 ( ) { while ( ( METHOD_2 ( ) ) != null ) ; }
private synchronized void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public final TYPE_1 METHOD_1 ( java.lang.String name , int VAR_1 ) throws java.io.IOException { return super . METHOD_1 ( name , VAR_1 ) ; }
public final void METHOD_1 ( ) { synchronized ( this ) { this . VAR_2 = VAR_3 ; METHOD_3 ( ) ; } }
public void METHOD_1 ( boolean VAR_2 ) { synchronized ( this ) { this . VAR_2 = VAR_2 ; } TYPE_1 . METHOD_2 ( new TYPE_2 ( ) { public void run ( ) { VAR_3 . METHOD_1 ( VAR_2 ) ; } } ) ; }
public void close ( ) { }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; java.util.Set < TYPE_1 > p = plugins ; if ( p != null ) p . add ( VAR_1 ) ; }
public void METHOD_1 ( final TYPE_1 VAR_1 ) { synchronized ( this ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; } }
private void METHOD_1 ( TYPE_1 message ) throws TYPE_2 { synchronized ( VAR_1 ) { while ( ( VAR_1 . size ( ) ) >= ( VAR_2 ) ) VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( message ) ; VAR_1 . METHOD_4 ( ) ; } }
void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { VAR_3 . set ( true ) ; synchronized ( VAR_1 ) { VAR_4 = VAR_5 ; VAR_5 = VAR_2 ; } VAR_3 . set ( false ) ; METHOD_2 ( VAR_2 ) ; }
public synchronized void METHOD_1 ( ) { try { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; } } catch ( java.io.IOException e ) { e . METHOD_3 ( ) ; } }
public < Result extends TYPE_1 > Result METHOD_1 ( final TYPE_2 < Result , ? super TYPE_3 > VAR_1 ) throws java.lang.Exception { synchronized ( this . METHOD_2 ( ) ) { return VAR_1 . METHOD_3 ( this ) ; } }
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { for ( TYPE_3 VAR_1 : this . VAR_2 ) { METHOD_2 ( VAR_1 ) ; } return java.util.Collections . METHOD_3 ( this . VAR_3 ) ; }
public synchronized void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { TYPE_2 VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_1 ( ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }
public void close ( ) { synchronized ( VAR_1 ) { if ( ! ( VAR_2 ) ) { try { VAR_2 = true ; METHOD_1 ( ) ; } finally { VAR_3 . METHOD_2 ( VAR_4 ) ; } } } }
public final synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this . VAR_2 ) { if ( ( VAR_1 == ( VAR_3 ) ) && ( METHOD_2 ( ) ) ) { return ; } this . VAR_2 . add ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 . set ( VAR_1 ) ; this . VAR_2 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( INT_1 ) ; }
public synchronized void METHOD_1 ( int index , TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_1 ( index , VAR_1 ) ; METHOD_2 ( ) ; }
public synchronized void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . VAR_1 = new java.util.ArrayList < TYPE_1 > ( VAR_1 ) ; METHOD_2 ( ) ; }
public synchronized byte [ ] METHOD_1 ( ) { return ( VAR_1 ) != null ? TYPE_1 . METHOD_2 ( VAR_1 ) : null ; }
private synchronized void METHOD_1 ( ) { VAR_1 . METHOD_2 ( 1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_3 ( ) ; }
public synchronized boolean METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . add ( VAR_1 ) ; }
public static synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) == 0 ) { TYPE_2 . METHOD_2 ( ) ; } return VAR_1 ; }
public synchronized void METHOD_1 ( java.lang.String s , TYPE_1 m ) { VAR_1 . add ( new TYPE_2 < java.lang.String , TYPE_1 > ( s , m ) ) ; }
public synchronized int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_1 ( ) ; TYPE_1 . d ( VAR_2 , STRING_1 ) ; return 0 ; }
public synchronized void METHOD_1 ( double VAR_1 ) { VAR_2 += VAR_1 ; METHOD_2 ( ( ( float ) ( VAR_1 ) ) ) ; METHOD_3 ( ( ( float ) ( VAR_1 ) ) ) ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; synchronized ( VAR_1 ) { if ( ( VAR_1 ) == false ) { VAR_1 = true ; METHOD_3 ( ) ; } } TYPE_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; }
public synchronized TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { return VAR_1 ; } else { return VAR_1 = new TYPE_2 ( VAR_2 . METHOD_2 ( ) ) ; } }
public synchronized boolean METHOD_1 ( java.lang.String key , long VAR_1 , long length ) { TYPE_1 VAR_2 = index . get ( key ) ; return ( VAR_2 != null ) && ( VAR_2 . METHOD_1 ( VAR_1 , length ) ) ; }
public synchronized void METHOD_1 ( TYPE_1 e ) { VAR_1 . add ( e ) ; }
public synchronized void METHOD_1 ( ) { METHOD_1 ( VAR_1 ) ; }
public synchronized java.util.List < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; return new java.util.ArrayList < java.lang.String > ( VAR_1 ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { synchronized ( VAR_1 ) { TYPE_4 rp = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( rp == null ) { return null ; } return rp . METHOD_3 ( ) ; } }
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { synchronized ( VAR_1 ) { TYPE_3 rp = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( rp == null ) { return null ; } return rp . METHOD_3 ( ) ; } }
public void run ( ) { this . METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; } }
public static synchronized void METHOD_1 ( java.lang.String message ) { if ( ( VAR_2 . client ) != null ) { TYPE_1 . e ( STRING_1 , message ) ; VAR_1 = new TYPE_2 ( VAR_2 . client , message ) ; VAR_1 . METHOD_2 ( ) ; } }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { synchronized ( VAR_2 ) { return VAR_2 . get ( VAR_1 . METHOD_3 ( ) ) ; } }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( ( VAR_2 . METHOD_2 ( ) ) == 0 ) { VAR_3 . add ( VAR_2 ) ; } } } }
public int METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 . size ( ) ; } }
public void METHOD_1 ( ) { log . info ( STRING_1 ) ; synchronized ( VAR_1 ) { size = 0 ; VAR_2 = 0 ; VAR_3 = 0 ; VAR_1 . METHOD_1 ( ) ; } }
public synchronized void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . data . METHOD_1 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( ) ; }
private final synchronized void METHOD_1 ( TYPE_1 p ) { METHOD_1 ( METHOD_2 ( p ) ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; }
public void METHOD_1 ( ) { VAR_1 . set ( false ) ; }
public synchronized boolean METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { throw VAR_1 ; } return ( VAR_2 . get ( ) ) || ( ! ( VAR_3 . isEmpty ( ) ) ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; } }
private synchronized void METHOD_1 ( ) { VAR_1 = true ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public java.util.Set < TYPE_1 > METHOD_1 ( ) { java.util.Set < TYPE_1 > VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = new TYPE_2 ( VAR_2 ) ; } return VAR_1 ; }
public void METHOD_1 ( ) { if ( ( VAR_3 ) == ( VAR_1 ) ) { synchronized ( this ) { VAR_3 = VAR_2 ; } } }
public final void METHOD_1 ( ) throws TYPE_1 { while ( ! ( this . METHOD_3 ( ) ) ) { synchronized ( this ) { this . METHOD_4 ( ) ; } } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_4 = true ; VAR_2 . METHOD_4 ( this ) ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_2 . METHOD_2 ( VAR_3 ) ; } return VAR_1 ; }
public synchronized boolean METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) throws java.lang.Exception { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , false ) ; }
public byte [ ] METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return ( ( byte [ ] ) ( VAR_1 . METHOD_2 ( ) ) ) ; } } return null ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( ) ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { assert ! ( VAR_2 . contains ( VAR_1 ) ) ; VAR_2 . add ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; }
public void METHOD_1 ( java.lang.String event , TYPE_2 ... args ) { METHOD_2 ( ) ; synchronized ( VAR_1 ) { for ( TYPE_3 VAR_2 : VAR_1 ) VAR_2 . METHOD_3 ( event , args ) ; } }
public void METHOD_1 ( final TYPE_1 VAR_1 ) { synchronized ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( null ) ; VAR_2 . METHOD_4 ( ) ; } }
public final TYPE_1 METHOD_1 ( java.lang.String name ) throws java.io.IOException { return super . METHOD_1 ( name ) ; }
public static void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 = new TYPE_1 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . type ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; }
public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
public synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) ++ ) == 0 ) { VAR_2 = VAR_3 . create ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_4 ( ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; }
public synchronized TYPE_1 get ( ) { while ( ! ( VAR_1 ) ) { try { METHOD_1 ( ) ; } catch ( TYPE_2 e ) { } } return VAR_2 ; }
public synchronized void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . add ( METHOD_2 ( ( ( VAR_3 ) + 1 ) ) ) ; VAR_1 = false ; }
public synchronized void METHOD_1 ( java.lang.String projectName , java.lang.String error ) throws java.lang.Exception { super . METHOD_1 ( projectName , error ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . equals ( STRING_1 ) ) { VAR_3 . METHOD_2 ( true ) ; } else { VAR_3 . METHOD_3 ( true ) ; } METHOD_4 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . add ( VAR_1 ) ; } }
public static synchronized boolean METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_2 ( ) ; VAR_2 = new TYPE_1 ( ) ; } return true ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . set ( true ) ; }
private synchronized void METHOD_1 ( ) { if ( METHOD_2 ( ) ) return ; if ( ( err ) != null ) METHOD_3 ( err ) ; if ( ! ( METHOD_4 ( ) ) ) METHOD_3 ( true ) ; }
public synchronized void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . METHOD_4 ( VAR_4 , VAR_1 ) ; }
private void METHOD_1 ( ) { if ( ( VAR_1 ) != ( VAR_2 ) ) { throw new TYPE_1 ( STRING_1 ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { }
public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; if ( ! VAR_1 ) { synchronized ( VAR_3 ) { this . VAR_4 = null ; } } }
public < TYPE_1 extends TYPE_2 > void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_3 . add ( VAR_1 ) ; } METHOD_2 ( null ) ; }
public void METHOD_1 ( ) { VAR_1 . get ( VAR_2 ) . VAR_3 = new TYPE_1 ( ) ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }
public synchronized void METHOD_1 ( TYPE_1 info ) { TYPE_2 < TYPE_3 > VAR_1 = info . METHOD_2 ( ) ; if ( VAR_1 != null ) { for ( TYPE_3 VAR_2 : VAR_1 ) { METHOD_1 ( VAR_2 . METHOD_3 ( ) ) ; } } }
public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . METHOD_1 ( ) ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
public void run ( ) { while ( true ) { synchronized ( w ) { try { w . METHOD_1 ( ) ; } catch ( TYPE_1 e ) { return ; } VAR_1 . METHOD_2 ( ) ; } } }
public synchronized void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( VAR_1 ) != null ) VAR_1 . METHOD_2 ( ) ; }
protected synchronized void METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( ( VAR_1 / FLOAT_1 ) ) ; }
public synchronized void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : new java.util.ArrayList ( VAR_2 ) ) { VAR_1 . METHOD_2 ( ) ; } }
public synchronized void close ( ) throws java.io.IOException { if ( ! ( VAR_1 ) ) { VAR_1 = true ; VAR_2 . METHOD_1 ( VAR_3 ) ; VAR_3 = null ; super . close ( ) ; } }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 , STRING_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; VAR_1 . METHOD_3 ( ) ; }
public int METHOD_1 ( java.lang.String n , int id ) { TYPE_1 c = METHOD_2 ( n ) ; if ( c == null ) { return 0 ; } synchronized ( c ) { c . METHOD_3 ( id ) ; } return 1 ; }
private synchronized TYPE_1 METHOD_1 ( ) throws java.io.IOException { return VAR_1 . METHOD_1 ( ) ; }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return false ; } return VAR_3 . METHOD_2 ( VAR_1 ) ; }
protected synchronized void METHOD_1 ( ) { ( VAR_1 ) -- ; synchronized ( VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_2 ( VAR_3 ) ; VAR_2 . METHOD_1 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; synchronized ( VAR_2 ) { for ( TYPE_2 c : VAR_2 ) { if ( c != null ) c . METHOD_1 ( VAR_1 ) ; } } }
public void METHOD_1 ( byte [ ] b ) { VAR_1 . add ( b ) ; }
public static synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; }
private synchronized boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( VAR_1 ) ) ) { return false ; } VAR_3 . METHOD_3 ( VAR_2 ) ; return METHOD_4 ( ) ; }
protected synchronized void METHOD_1 ( TYPE_1 message ) { VAR_1 . add ( message ) ; METHOD_2 ( ) ; }
public java.lang.String METHOD_1 ( ) { return VAR_1 ; }
public synchronized void add ( TYPE_1 ... VAR_1 ) { VAR_2 . add ( VAR_1 ) ; }
public synchronized void METHOD_1 ( java.lang.String message ) { VAR_2 . METHOD_1 ( ( ( VAR_2 . METHOD_3 ( ) ) + message ) ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } TYPE_2 . METHOD_3 ( ) ; }
protected synchronized boolean METHOD_1 ( ) { return ! ( VAR_1 . isEmpty ( ) ) ; }
private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { TYPE_1 . d ( STRING_1 , VAR_2 . toString ( ) ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( java.lang.String VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; this . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; }
public TYPE_1 METHOD_1 ( double VAR_1 , double VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , METHOD_2 ( ) , METHOD_3 ( ) ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { synchronized ( VAR_1 ) { TYPE_2 rp = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( rp == null ) { return ; } rp . METHOD_3 ( VAR_2 ) ; } }
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( VAR_3 ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_2 ( ) ) ) ) { return VAR_1 ; } return null ; }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( this . METHOD_2 ( VAR_2 ) ) { return true ; } return false ; }
protected synchronized void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , float VAR_2 ) { VAR_3 . METHOD_2 ( VAR_5 ) ; VAR_4 = VAR_3 . put ( VAR_5 , false ) ; }
public void METHOD_1 ( final TYPE_1 VAR_1 ) { synchronized ( VAR_3 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; } }
public static synchronized TYPE_1 METHOD_1 ( java.lang.String id ) throws java.lang.Exception { if ( VAR_1 . isEmpty ( ) ) { return null ; } VAR_2 = id . METHOD_2 ( ) ; return TYPE_1 . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 message ) { synchronized ( this . VAR_1 ) { this . VAR_1 . add ( message ) ; } }
public void METHOD_1 ( TYPE_1 r ) { synchronized ( this ) { this . VAR_1 . METHOD_2 ( r ) ; } }
public static synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < TYPE_3 > VAR_2 ) { TYPE_4 . METHOD_2 ( VAR_1 , VAR_2 , null ) ; }
private synchronized void METHOD_1 ( ) { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_2 = new TYPE_2 ( this , STRING_2 ) ; VAR_1 = true ; VAR_2 . METHOD_1 ( ) ; }
public synchronized TYPE_1 METHOD_1 ( int i ) { if ( ( i >= 0 ) && ( i < ( table . size ( ) ) ) ) return table . METHOD_2 ( i ) ; return null ; }
public synchronized void METHOD_1 ( java.lang.String url ) { VAR_1 = true ; METHOD_2 ( ) ; VAR_1 = false ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }
public boolean METHOD_1 ( long VAR_1 ) { return METHOD_1 ( VAR_1 , VAR_2 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this ) { METHOD_2 ( ) ; if ( ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ) { VAR_3 = VAR_3 . METHOD_5 ( ) ; } } }
public synchronized int getValue ( ) { METHOD_2 ( ) ; return value ; }
public void run ( ) { VAR_1 . METHOD_1 ( STRING_1 ) ; VAR_2 = true ; synchronized ( VAR_3 ) { METHOD_2 ( ) ; if ( VAR_2 ) METHOD_3 ( ) ; } }
protected synchronized void METHOD_1 ( ) { if ( ! ( METHOD_2 ( ) ) ) return ; try { METHOD_3 ( ) ; } catch ( java.lang.Exception e ) { e . METHOD_4 ( ) ; } finally { VAR_1 = new TYPE_1 ( ) ; } }
public synchronized void METHOD_1 ( final java.lang.String name , final TYPE_1 s ) { VAR_1 . put ( s , name ) ; }
private synchronized void METHOD_1 ( ) { if ( VAR_1 ) { METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; VAR_1 = false ; } METHOD_2 ( ) . METHOD_4 ( VAR_3 , null , false ) ; VAR_4 = true ; }
public synchronized void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( VAR_1 , new TYPE_2 ( VAR_2 ) ) ; VAR_3 . METHOD_4 ( ) ; VAR_4 = true ; }
public synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String key = METHOD_2 ( VAR_1 ) ; TYPE_2 VAR_2 = VAR_3 . get ( key ) ; if ( VAR_2 == null ) { return false ; } return ( VAR_4 ) == ( VAR_5 ) ; }
public synchronized void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { VAR_2 [ i ] = - ( VAR_1 [ i ] . METHOD_2 ( ) ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_2 ( VAR_3 ) ; } return VAR_1 ; }
public synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) ; }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
void METHOD_1 ( short VAR_1 ) { TYPE_1 . METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( VAR_1 ) ) ; synchronized ( VAR_2 ) { VAR_2 . set ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; } }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( null == ( VAR_2 ) ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; } return VAR_2 ; }
public synchronized void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 ) { this . VAR_3 . put ( VAR_1 , VAR_2 ) ; }
private synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }
synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_1 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( ) ) ) ( VAR_3 ) ++ ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . values ( ) ; }
public TYPE_1 METHOD_1 ( ) { return this . VAR_1 . get ( ) ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) return false ; VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; return true ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_4 = VAR_1 ; return TYPE_1 . METHOD_2 ( ) ; } return VAR_2 ; }
private synchronized void METHOD_1 ( ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_3 . values ( ) ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
private static synchronized void METHOD_5 ( java.lang.String id ) { long VAR_1 = TYPE_1 . METHOD_2 ( ) ; if ( ( TYPE_2 . METHOD_3 ( id ) ) != null ) { VAR_2 = true ; TYPE_3 . METHOD_4 ( VAR_1 , id , STRING_1 ) ; } }
private synchronized void METHOD_1 ( final long [ ] VAR_1 ) { VAR_2 . METHOD_2 ( ) ; VAR_2 . add ( INT_1 ) ; for ( long value : VAR_1 ) { VAR_2 . add ( value ) ; } }
public java.util.List < TYPE_1 > METHOD_1 ( ) { final java.util.List < TYPE_1 > VAR_1 ; synchronized ( VAR_3 ) { VAR_1 = new java.util.ArrayList ( VAR_3 ) ; } return VAR_1 ; }
public TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { VAR_1 = METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; } } } return this ; }
private void METHOD_1 ( TYPE_1 event ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( event . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( event . METHOD_3 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( null ) ; } }
public synchronized void METHOD_1 ( java.lang.String id ) { VAR_1 . METHOD_1 ( id ) ; }
public boolean METHOD_1 ( ) { synchronized ( this ) { if ( VAR_1 ) { return true ; } } if ( super . METHOD_1 ( ) ) { METHOD_2 ( super . METHOD_3 ( ) ) ; return true ; } return false ; }
public TYPE_1 [ ] METHOD_1 ( ) { synchronized ( VAR_1 ) { return ( ( TYPE_1 [ ] ) ( VAR_2 . METHOD_2 ( new TYPE_1 [ VAR_2 . size ( ) ] ) ) ) ; } }
protected synchronized void add ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . put ( VAR_1 . getId ( ) , ( ( VAR_2 . size ( ) ) - 1 ) ) ; }
public void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_3 VAR_4 , TYPE_3 VAR_5 , java.lang.String key ) { synchronized ( this ) { METHOD_2 ( VAR_3 , VAR_4 , VAR_5 ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_1 ) { this . VAR_1 = VAR_1 ; } }
public final void METHOD_1 ( int id ) { if ( id < 0 ) throw new TYPE_1 ( STRING_1 ) ; this . id = id ; if ( this . VAR_1 ) { synchronized ( this ) { this . METHOD_2 ( ) ; } } }
public static TYPE_1 get ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
public synchronized void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } VAR_1 = true ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }
synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_3 ( ) ; } }
public synchronized TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_5 ) ; return VAR_3 ; }
public synchronized void METHOD_1 ( boolean VAR_1 ) { if ( this . VAR_1 = VAR_1 ) { METHOD_2 ( ) ; } }
public final void METHOD_1 ( TYPE_1 user , java.lang.String VAR_1 ) { synchronized ( VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) VAR_2 . get ( VAR_1 . METHOD_3 ( ) ) . METHOD_1 ( user ) ; } }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) return false ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; return true ; }
protected void METHOD_1 ( ) { if ( ( VAR_2 ) == ( VAR_3 ) ) { METHOD_2 ( ) . METHOD_3 ( ) ; } }
void METHOD_1 ( TYPE_1 < ? > VAR_1 ) { synchronized ( this ) { VAR_2 = null ; } VAR_1 . METHOD_1 ( ) ; }
public synchronized void run ( ) { if ( ! ( METHOD_1 ( ) ) ) { return ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( VAR_4 ) ; } VAR_1 . METHOD_2 ( VAR_2 ) ; }
protected boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 = METHOD_2 ( VAR_3 ) ; } return VAR_2 ; }
public static synchronized TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( VAR_1 ) ; } return VAR_2 ; }
protected final java.util.Map < TYPE_1 , TYPE_2 < ? extends TYPE_3 < ? > > > METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 ; } }
public void METHOD_1 ( ) { this . VAR_1 = true ; }
protected synchronized TYPE_1 . Status getStatus ( ) { return VAR_1 ; }
public boolean set ( java.util.List < TYPE_1 > VAR_1 ) { synchronized ( this . VAR_1 ) { this . VAR_1 . METHOD_1 ( ) ; this . size = VAR_1 . size ( ) ; return this . VAR_1 . METHOD_2 ( VAR_1 ) ; } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } return VAR_1 ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_2 ( ) ; } return VAR_1 ; }
public final synchronized TYPE_1 METHOD_1 ( ) { this . METHOD_2 ( VAR_1 ) ; this . METHOD_3 ( VAR_3 , VAR_3 , VAR_4 , VAR_3 ) ; return new TYPE_1 ( this ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_3 ( ) ; }
public final synchronized int METHOD_1 ( final java.lang.String key , final int VAR_1 ) { int VAR_2 = ( METHOD_2 ( key , 0 ) ) + VAR_1 ; put ( key , VAR_2 ) ; return VAR_2 ; }
public synchronized boolean METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; METHOD_4 ( ) ; return false ; } else { return true ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { }
public static synchronized boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 == null ; }
public java.util.List METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; return VAR_3 ; } }
public synchronized void METHOD_1 ( TYPE_1 event ) { if ( event == null ) { return ; } VAR_2 = null ; METHOD_2 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 client ) { this . VAR_2 . METHOD_3 ( client ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = VAR_15 ; VAR_16 = VAR_17 ; }
private synchronized void METHOD_1 ( ) { for ( TYPE_1 c : VAR_2 . values ( ) ) c . METHOD_3 ( true ) ; METHOD_4 ( ) ; }
public void METHOD_3 ( ) { VAR_1 = 0 ; VAR_2 = false ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; synchronized ( this ) { this . METHOD_4 ( ) ; } }
public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }
public synchronized TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > VAR_1 = new TYPE_1 < java.lang.String > ( VAR_3 ) ; VAR_3 = new TYPE_1 < java.lang.String > ( ) ; return VAR_1 ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_2 ; } }
public boolean METHOD_1 ( ) { return VAR_1 ; }
private void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 . add ( new TYPE_2 ( this , VAR_1 , VAR_3 ) ) ; }
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( false ) ; } VAR_2 = true ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . add ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; if ( ( VAR_4 . size ( ) ) < ( VAR_5 ) ) { METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( ) { if ( ( ( id ) != null ) && ( ( VAR_1 ) == null ) ) { VAR_1 = TYPE_1 . METHOD_2 ( ) ; } }
public boolean METHOD_1 ( ) { return ( VAR_2 ) == ( VAR_3 ) ; }
public synchronized void METHOD_1 ( int value ) { if ( value != ( VAR_1 ) ) { VAR_1 = METHOD_2 ( value ) ; } }
public void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_3 ) + VAR_1 ) ) ; VAR_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) . METHOD_5 ( ) ) ; METHOD_6 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { synchronized ( VAR_2 ) { ( VAR_3 ) ++ ; VAR_2 . METHOD_2 ( ) ; } try { synchronized ( VAR_4 ) { VAR_4 . METHOD_3 ( ) ; } } catch ( TYPE_3 VAR_5 ) { } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( this . VAR_2 ) { this . VAR_2 . add ( VAR_1 ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , double VAR_2 ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; METHOD_4 ( VAR_1 ) ; }
public synchronized java.util.List < TYPE_1 > METHOD_3 ( ) { return new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_2 ) ) return false ; VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . add ( VAR_1 ) ; return true ; }
private java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_2 ) == null ) { VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_3 ) ; } return VAR_2 ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , 0 , VAR_2 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { return ; } if ( ( VAR_3 ) != VAR_1 ) { VAR_3 = VAR_1 ; METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 event ) throws TYPE_2 { VAR_2 . METHOD_2 ( event ) ; METHOD_3 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_1 ( VAR_3 ) ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; VAR_12 = VAR_13 ; } }
protected synchronized void METHOD_1 ( boolean VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 ) { if ( VAR_1 ) { this . VAR_6 . set ( 0 , 0 , METHOD_2 ( ) , METHOD_3 ( ) ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_2 = VAR_3 ; this . VAR_4 = VAR_5 ; this . VAR_6 = VAR_7 ; this . VAR_8 = VAR_9 ; }
protected TYPE_1 METHOD_1 ( final TYPE_2 key ) { synchronized ( VAR_1 ) { return VAR_1 . get ( key ) ; } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return VAR_1 ; } VAR_1 = new TYPE_1 ( ) ; return VAR_1 ; }
public synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_1 ; } }
public void set ( TYPE_1 value ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_1 ( value ) ; super . set ( value ) ; } }
public TYPE_1 get ( ) { VAR_2 . METHOD_1 ( STRING_1 , METHOD_2 ( ) . getName ( ) ) ; if ( ( VAR_1 ) == null ) { METHOD_3 ( ) ; } return VAR_1 ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; } }
public synchronized TYPE_1 get ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { VAR_2 = METHOD_1 ( VAR_1 ) ; VAR_3 . put ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) != 0 ) { return VAR_1 . METHOD_2 ( ) ; } return TYPE_2 . METHOD_3 ( ) ; }
public synchronized void METHOD_1 ( ) { METHOD_5 ( ) ; METHOD_4 ( ) ; METHOD_3 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_2 ( ) ; if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_8 ( null ) ; } }
public synchronized boolean METHOD_1 ( ) throws TYPE_1 { if ( ( size ( ) ) == 0 ) { METHOD_2 ( ) ; return true ; } else { return false ; } }
protected synchronized void METHOD_1 ( double VAR_1 ) { try { TYPE_1 . METHOD_2 ( ( ( long ) ( VAR_1 * INT_1 ) ) ) ; METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } }
void METHOD_1 ( TYPE_1 error , TYPE_2 VAR_1 ) { synchronized ( VAR_2 ) { TYPE_4 . METHOD_4 ( VAR_2 ) . put ( VAR_1 , new TYPE_5 ( error ) ) ; } }
private static synchronized void METHOD_1 ( ) { if ( ( VAR_2 ) != null ) { TYPE_1 . d ( VAR_1 , STRING_1 ) ; VAR_2 . METHOD_2 ( ) ; } }
public TYPE_1 [ ] METHOD_1 ( ) { TYPE_1 [ ] VAR_2 = VAR_3 . METHOD_1 ( ) ; VAR_4 = VAR_3 . METHOD_2 ( ) ; return VAR_2 ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( null == ( TYPE_1 . singleton ) ) { TYPE_1 . singleton = new TYPE_1 ( ) ; } return TYPE_1 . singleton ; }
public synchronized void METHOD_1 ( TYPE_1 client ) { TYPE_2 . METHOD_2 ( this . VAR_2 . contains ( client ) ) ; this . VAR_2 . METHOD_3 ( client ) ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_3 ( ) ; }
protected synchronized void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { ( VAR_3 ) ++ ; } }
public TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } return VAR_1 . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( long VAR_1 ) { for ( TYPE_1 < TYPE_2 > VAR_2 : VAR_3 ) { VAR_2 . METHOD_2 ( VAR_1 , false , null ) ; } VAR_4 . METHOD_3 ( VAR_1 ) ; }
protected synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { METHOD_2 ( ) ; this . VAR_1 = VAR_1 ; boolean VAR_2 = ( VAR_3 ) == VAR_1 ; VAR_4 . METHOD_3 ( ( VAR_5 ? ! VAR_2 : VAR_2 ) ) ; }
protected synchronized TYPE_1 [ ] METHOD_1 ( TYPE_2 < TYPE_3 , java.lang.String > VAR_1 ) { if ( VAR_1 == null ) { return null ; } else { return METHOD_1 ( VAR_1 . METHOD_2 ( ) , VAR_1 . METHOD_3 ( ) ) ; } }
public static synchronized boolean METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { VAR_1 = true ; return true ; } else { return false ; } }
public int METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return 0 ; } else { synchronized ( VAR_1 ) { return ( VAR_1 ) == null ? 0 : VAR_1 . size ( ) ; } } }
public static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { synchronized ( VAR_1 ) { return VAR_1 . METHOD_2 ( VAR_3 ) . get ( ) . METHOD_3 ( VAR_2 ) ; } }
public void METHOD_1 ( TYPE_1 m ) { synchronized ( VAR_1 ) { VAR_1 . add ( m ) ; METHOD_2 ( ) ; } }
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { synchronized ( this ) { while ( isEmpty ( ) ) { METHOD_2 ( ) ; } METHOD_4 ( ) ; return METHOD_5 ( ) ; } }
public static TYPE_2 METHOD_1 ( ) { return VAR_2 ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws TYPE_2 { super . METHOD_3 ( VAR_1 , VAR_2 ) ; }
static synchronized void METHOD_1 ( ) { if ( ( VAR_1 . server ) != null ) { VAR_2 . METHOD_1 ( ) ; } VAR_3 = false ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_1 . METHOD_2 ( ) ; } }
final TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 ) { return VAR_2 ; } }
public synchronized java.util.Set < java.lang.String > METHOD_1 ( ) { return new TYPE_1 < java.lang.String > ( VAR_1 ) ; }
public synchronized void METHOD_1 ( ) { VAR_2 = TYPE_1 . METHOD_2 ( ) ; VAR_1 = true ; if ( ( table ) != null ) { table . METHOD_3 ( STRING_1 , true ) ; } }
public void run ( ) { this . VAR_1 = null ; try { this . METHOD_1 ( ) ; } catch ( TYPE_1 e ) { this . VAR_1 = e ; } synchronized ( this ) { this . METHOD_2 ( ) ; } }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { try { VAR_1 = new TYPE_1 ( ) ; } catch ( TYPE_2 VAR_2 ) { TYPE_3 . error ( STRING_1 , VAR_2 ) ; } } return VAR_1 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_4 . METHOD_1 ( VAR_1 ) ; }
protected void METHOD_1 ( int VAR_1 ) { try { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; } } catch ( TYPE_1 VAR_2 ) { VAR_3 . METHOD_3 ( VAR_2 ) ; } }
private synchronized void METHOD_1 ( int VAR_1 ) { try { VAR_2 . METHOD_2 ( id , VAR_3 ) ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; } VAR_4 [ VAR_1 ] . METHOD_4 ( ) ; }
public static synchronized void METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_3 ) { return ; } TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ; VAR_3 = true ; }
public synchronized void close ( ) { close ( 0 ) ; }
private synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_1 . METHOD_3 ( ) ; } }
private void METHOD_1 ( ) { synchronized ( VAR_3 ) { while ( VAR_1 ) { TYPE_1 . METHOD_2 ( VAR_2 , ( STRING_1 + ( VAR_1 ) ) ) ; try { VAR_3 . METHOD_3 ( ) ; } catch ( TYPE_2 e ) { } } } }
public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 ) ; METHOD_3 ( STRING_3 , STRING_4 ) ; }
public synchronized java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 group ) { if ( group == null ) { return null ; } return METHOD_1 ( group . METHOD_2 ( ) ) ; }
public synchronized void METHOD_1 ( double VAR_1 ) { this . VAR_2 += VAR_1 ; this . VAR_2 = TYPE_1 . METHOD_2 ( this . VAR_2 , this . METHOD_3 ( ) , VAR_3 ) ; }
public synchronized void METHOD_1 ( int VAR_1 , TYPE_1 input ) { VAR_2 . METHOD_2 ( ( STRING_1 + input ) ) ; if ( input == null ) return ; this . VAR_3 . METHOD_1 ( VAR_1 , input ) ; }
public boolean METHOD_1 ( ) { return ! ( this . VAR_1 . isEmpty ( ) ) ; }
public static synchronized TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
private static synchronized int METHOD_1 ( ) throws TYPE_1 { while ( ( TYPE_2 . METHOD_2 ( ( -- ( VAR_1 ) ) ) ) != null ) ; return VAR_1 ; }
public static synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { return ; } VAR_2 = new TYPE_3 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }
int METHOD_1 ( ) { int VAR_1 = 0 ; synchronized ( VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 ) { VAR_1 += VAR_4 . size ( ) ; } } return VAR_1 ; }
private void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( ) ; for ( TYPE_3 VAR_4 : VAR_3 ) VAR_1 . create ( VAR_4 ) ; }
final void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_3 . METHOD_1 ( ) ; VAR_4 = true ; VAR_2 = null ; } } }
public void METHOD_1 ( final TYPE_1 VAR_1 ) { synchronized ( this ) { VAR_2 = true ; ( ( TYPE_2 ) ( this ) ) . METHOD_2 ( ) ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } }
public void run ( ) { VAR_2 . METHOD_1 ( ) ; }
static void METHOD_1 ( long VAR_1 ) { VAR_3 . METHOD_2 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 . size ( ) ) > 1 ) { this . VAR_1 . METHOD_1 ( ) ; } }
public void close ( ) { synchronized ( this ) { if ( ( client ) != null ) { this . client . close ( ) ; } } }
public TYPE_1 METHOD_1 ( ) { synchronized ( VAR_1 ) { METHOD_2 ( ) ; org.junit.Assert . METHOD_3 ( VAR_2 . isEmpty ( ) ) ; return VAR_2 . get ( 0 ) ; } }
private synchronized void METHOD_1 ( ) { try { this . VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } }
public int METHOD_1 ( TYPE_1 t ) { return VAR_1 . METHOD_1 ( t ) ; }
public synchronized void put ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; METHOD_1 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( TYPE_1 ctx ) { VAR_1 = ctx ; TYPE_2 . info ( STRING_1 ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; this . VAR_2 . METHOD_1 ( VAR_1 ) ; }
public synchronized void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_2 . METHOD_5 ( ) ; }
public static synchronized void METHOD_1 ( TYPE_3 VAR_4 , TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_4 ) . edit ( ) . METHOD_3 ( VAR_2 , VAR_1 . METHOD_4 ( VAR_3 ) ) . apply ( ) ; }
public java.lang.String METHOD_1 ( java.lang.String cmd ) { synchronized ( VAR_1 ) { return METHOD_2 ( cmd ) ; } }
protected void append ( TYPE_1 e ) { VAR_1 . add ( e ) ; }
public synchronized void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException , TYPE_1 { METHOD_1 ( VAR_1 , VAR_2 . METHOD_2 ( ) ) ; }
public void METHOD_1 ( ) { synchronized ( VAR_1 ) { try { VAR_3 = true ; VAR_1 . METHOD_2 ( ) ; VAR_2 . close ( ) ; } catch ( java.lang.Exception e ) { e . METHOD_3 ( ) ; } } }
synchronized java.util.List < TYPE_1 > METHOD_1 ( ) { return new java.util.ArrayList ( VAR_1 ) ; }
TYPE_1 get ( TYPE_2 VAR_1 , TYPE_1 key ) { TYPE_3 VAR_3 = METHOD_1 ( VAR_1 , key ) ; return VAR_3 == null ? null : VAR_3 . value ; }
public synchronized double METHOD_1 ( final double VAR_1 ) { return ( METHOD_2 ( VAR_1 ) ) * ( METHOD_3 ( ) ) ; }
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { synchronized ( VAR_1 ) { TYPE_4 rp = VAR_2 . get ( VAR_1 . METHOD_2 ( ) ) ; if ( rp == null ) { return null ; } return rp . METHOD_1 ( ) ; } }
private synchronized void METHOD_1 ( ) throws java.io.IOException { final TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( VAR_1 . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( this ) ; } }
public synchronized TYPE_1 METHOD_1 ( ) { if ( VAR_1 ) { return this ; } VAR_1 = true ; VAR_2 . METHOD_1 ( ) ; VAR_3 . METHOD_1 ( ) ; return this ; }
public java.lang.String METHOD_1 ( ) { final java.lang.String VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = this . VAR_1 ; } return VAR_1 . isEmpty ( ) ? null : VAR_1 ; }
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; synchronized ( VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; VAR_3 . METHOD_3 ( ) ; } return VAR_1 ; }
public void METHOD_1 ( final java.lang.String name ) { final TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( name ) ; if ( VAR_2 != null ) { VAR_2 . close ( true , true ) ; } }
public synchronized int METHOD_1 ( ) { if ( ( VAR_1 ) != null ) return VAR_1 . METHOD_3 ( ) ; TYPE_1 . d ( VAR_2 , STRING_1 ) ; return 0 ; }
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { synchronized ( VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ( ( VAR_4 ) ++ ) , VAR_1 ) ; VAR_2 . add ( VAR_3 ) ; } }
public void METHOD_1 ( final java.lang.String format ) throws TYPE_1 { synchronized ( VAR_1 ) { METHOD_2 ( format ) ; } }
public synchronized void METHOD_1 ( final java.util.List < java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }
public static synchronized TYPE_1 METHOD_1 ( ) { if ( ( VAR_2 ) == null ) { VAR_2 = new TYPE_1 ( ) ; } return VAR_2 ; }
private void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( ) ; synchronized ( VAR_3 ) { if ( ( VAR_1 ) != null ) VAR_4 = new TYPE_1 ( VAR_1 ) ; } }
public void close ( ) { synchronized ( this ) { this . METHOD_2 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_3 ) { VAR_2 . add ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) ; } }
public void METHOD_1 ( final java.lang.String message ) { for ( TYPE_1 server : VAR_1 ) { server . METHOD_2 ( message ) ; } }
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 . METHOD_2 ( ) . equals ( VAR_1 ) ) { return VAR_3 ; } } return null ; }
public synchronized void METHOD_1 ( TYPE_1 view ) { view . METHOD_2 ( VAR_1 , this ) ; VAR_2 . METHOD_3 ( view ) ; }
public synchronized boolean METHOD_1 ( final java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; }
private void METHOD_1 ( java.lang.String name ) { VAR_1 . add ( name ) ; }
public static synchronized void METHOD_1 ( ) { ( TYPE_1 . METHOD_2 ( ) . id ) ++ ; }
private static synchronized int METHOD_1 ( ) { ( VAR_1 ) ++ ; return VAR_1 ; }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { while ( ( VAR_2 ) > 0 ) { try { VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_1 e ) { } } ++ ( VAR_3 ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( VAR_2 , STRING_1 ) ; synchronized ( VAR_3 class ) { TYPE_3 . METHOD_2 ( VAR_4 ) ; METHOD_3 ( ) ; VAR_5 = null ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_3 = VAR_1 . METHOD_3 ( ) ; this . VAR_4 = true ; this . METHOD_4 ( ) ; }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { VAR_2 . METHOD_2 ( VAR_1 . get ( i ) ) ; } } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( 1 , 1 ) ; } } } return VAR_1 ; }
public synchronized void put ( TYPE_1 path ) { put ( path . toString ( ) ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { this . VAR_1 = VAR_1 ; METHOD_2 ( ) ; VAR_2 . METHOD_3 ( this . VAR_1 ) ; }
private synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_1 ) ; } }
public synchronized boolean METHOD_1 ( ) { return ( ( VAR_1 ) >= 0 ) && ( ( VAR_2 ) > 0 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , this ) ; }
public void METHOD_1 ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_2 < TYPE_1 > add ) { synchronized ( this . VAR_2 ) { this . VAR_2 . METHOD_2 ( VAR_1 ) ; this . VAR_2 . METHOD_3 ( add ) ; } }
synchronized void METHOD_1 ( ) { VAR_3 = VAR_1 ; VAR_2 . METHOD_3 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_3 . add ( VAR_1 ) ; }
private void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { synchronized ( VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 , VAR_2 ) ; } }
public boolean METHOD_1 ( ) { return VAR_1 . get ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 view , int VAR_1 ) { if ( VAR_1 != ( VAR_2 ) ) { METHOD_3 ( view , VAR_1 , VAR_3 , INT_1 ) ; } }
private void METHOD_1 ( TYPE_1 repo ) { VAR_1 . METHOD_2 ( STRING_1 , METHOD_3 ( ) ) ; VAR_3 = false ; METHOD_4 ( repo ) ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }
