public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_1 , VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( VAR_3 . METHOD_4 ( ) ) ; }
public void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( null ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.ArrayList < > ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_1 ) { VAR_2 . add ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; } }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 = false ; }
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this ) ; VAR_2 = false ; VAR_1 . METHOD_2 ( ) ; }
public void METHOD_1 ( java.util.Map < TYPE_1 , TYPE_2 . Project > event ) { if ( METHOD_2 ( ) . METHOD_3 ( VAR_1 ) ) this . VAR_2 = event . get ( METHOD_2 ( ) . METHOD_4 ( VAR_1 ) ) ; VAR_3 . METHOD_5 ( ) ; }
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 ) == VAR_1 ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( TYPE_1 : : METHOD_3 ) ; }
public void run ( ) { VAR_1 . METHOD_1 ( ( STRING_1 + ( this . VAR_2 ) ) ) ; VAR_3 = VAR_4 . apply ( this , this . VAR_5 ) ; VAR_1 . METHOD_1 ( ( STRING_2 + ( this . VAR_2 ) ) ) ; }
public void METHOD_1 ( TYPE_1 event ) { METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( this , ( STRING_1 + ( VAR_1 . METHOD_4 ( ) ) ) ) ; }
public void METHOD_1 ( ) { VAR_1 . set ( false ) ; VAR_2 . METHOD_2 ( ) ; try { VAR_2 . METHOD_3 ( ) ; } catch ( TYPE_1 VAR_3 ) { } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . add ( VAR_1 ) ; METHOD_2 ( ) ; if ( VAR_1 == ( VAR_2 ) ) { VAR_3 . METHOD_3 ( this ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 = null ; } }
public static TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( INT_1 , INT_1 ) ; } } } return VAR_1 ; }
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) != true ) ) { VAR_2 = true ; VAR_3 . METHOD_2 ( ) ; } }
public synchronized void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_1 . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 view ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_3 ) ; } catch ( java.lang.Exception e ) { VAR_4 . METHOD_4 ( e . toString ( ) ) ; } }
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . update ( ) ; }
public void METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { this . VAR_2 = new TYPE_2 ( METHOD_2 ( ) , VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 [ VAR_1 ] . set ( true ) ; TYPE_2 . METHOD_2 ( ) ; }
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { VAR_1 . METHOD_2 ( STRING_1 , TYPE_3 . METHOD_3 ( VAR_2 , STRING_1 ) ) ; return STRING_2 ; }
private boolean METHOD_1 ( ) { boolean VAR_1 = false ; for ( boolean VAR_2 : VAR_3 ) { if ( ! VAR_2 ) { VAR_1 = true ; } } return VAR_1 ; }
public boolean METHOD_1 ( TYPE_1 < ? > VAR_1 ) { return ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_4 , VAR_4 . METHOD_3 ( ) , VAR_1 ) ) ; }
public synchronized void METHOD_1 ( ) { try { this . VAR_1 = false ; VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_1 VAR_3 ) { VAR_3 . METHOD_3 ( ) ; } }
protected void METHOD_1 ( ) { VAR_1 = false ; synchronized ( VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( TYPE_3 . METHOD_2 ( METHOD_3 ( ) , VAR_3 ) ) ; VAR_2 . METHOD_4 ( ( - INT_1 ) ) ; VAR_4 . METHOD_5 ( true ) ; VAR_4 . METHOD_6 ( ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { TYPE_3 VAR_3 = METHOD_2 ( null , VAR_1 , ( ( TYPE_4 ) ( VAR_4 ) ) . VAR_5 ) ; TYPE_5 . METHOD_3 ( VAR_3 ) ; TYPE_5 . METHOD_4 ( VAR_3 ) ; return VAR_3 ; }
private void METHOD_1 ( ) { log ( STRING_1 ) ; VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( ) ; while ( VAR_1 . METHOD_4 ( ) ) ; }
public void METHOD_1 ( TYPE_1 event ) { VAR_1 = event . METHOD_2 ( ) ; METHOD_3 ( VAR_2 . get ( VAR_1 ) ) ; }
protected void METHOD_1 ( ) { VAR_1 . add ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; VAR_1 . add ( VAR_4 ) ; VAR_1 . add ( VAR_5 ) ; }
public int getValue ( TYPE_1 VAR_1 ) { return METHOD_1 ( VAR_1 ) . METHOD_2 ( ) ; }
public static void METHOD_1 ( ) { TYPE_1 b = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_2 . METHOD_3 ( INT_1 , 2 , b ) ; }
public void METHOD_1 ( TYPE_1 event ) { TYPE_2 . i ( VAR_1 class . METHOD_2 ( ) , STRING_1 ) ; VAR_2 . METHOD_3 ( false ) ; VAR_3 = true ; METHOD_4 ( ) ; }
public void METHOD_1 ( TYPE_1 event ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; }
public void METHOD_1 ( TYPE_1 r ) { VAR_1 . METHOD_1 ( ( ) - > { VAR_2 . METHOD_2 ( ) ; try { r . run ( ) ; } finally { VAR_2 . METHOD_3 ( ) ; } } ) ; }
public static void METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 . put ( VAR_1 , VAR_2 ) ; }
public static void METHOD_1 ( TYPE_1 input , TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 . METHOD_2 ( new TYPE_5 ( input , TYPE_6 . METHOD_3 ( VAR_2 ) , VAR_1 , VAR_3 ) ) ; }
private void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { log . METHOD_3 ( e . getMessage ( ) ) ; } }
private void METHOD_1 ( ) { while ( true ) { try { METHOD_2 ( ) ; } catch ( java.lang.Exception e ) { VAR_1 . log ( VAR_2 , STRING_1 , e ) ; } } }
private synchronized void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 { try { VAR_2 . METHOD_1 ( TYPE_4 . METHOD_2 ( ) , VAR_1 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( STRING_1 , e ) ; } }
boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) ;
protected void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; } catch ( TYPE_2 e ) { e . METHOD_3 ( ) ; } }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( VAR_1 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 r ) { return new TYPE_1 ( ( STRING_1 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; }
protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) > ( VAR_1 ) ) { super . METHOD_1 ( ) ; } else { METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( this , this . VAR_2 ) ; } }
public void METHOD_1 ( ) { VAR_1 = VAR_2 new TYPE_1 ( new TYPE_2 ( ) , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( ) ; }
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . getId ( ) ) == ( VAR_2 ) ) { VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_5 . METHOD_3 ( ) ; } }
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; VAR_3 . METHOD_4 ( ) ; return VAR_3 ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { this . VAR_1 = VAR_1 ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_2 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { TYPE_2 user = VAR_1 . user ; TYPE_3 VAR_3 = user . METHOD_2 ( ) ; VAR_3 . METHOD_1 ( user , VAR_2 ) ; METHOD_3 ( VAR_1 , VAR_4 , STRING_1 ) ; }
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; int VAR_4 = VAR_2 . METHOD_3 ( ) ; return new TYPE_1 ( VAR_4 ) ; }
public void run ( ) { VAR_1 . METHOD_1 ( ) ; try { p . METHOD_2 ( ) ; } catch ( TYPE_1 e ) { VAR_2 . METHOD_3 ( STRING_1 ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . getValue ( VAR_3 class ) ; if ( VAR_2 ) { VAR_4 = true ; METHOD_2 ( ) ; TYPE_2 . d ( STRING_1 , STRING_2 ) ; } }
public static void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( ) ; } catch ( java.lang.Exception VAR_2 ) { VAR_2 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( ( - 1 ) ) ; } }
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( ( VAR_2 ) == null ) VAR_2 = new TYPE_1 ( VAR_1 ) ; return ( ( TYPE_1 ) ( VAR_2 ) ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , int id ) { if ( ( ! ( VAR_2 . METHOD_2 ( ) ) ) && ( VAR_3 ) ) { VAR_2 = new TYPE_2 ( VAR_4 ) ; VAR_2 . METHOD_3 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_3 ; VAR_4 . METHOD_2 ( VAR_5 , VAR_2 ) ; METHOD_3 ( ) ; }
public void close ( ) throws java.lang.Exception { try { VAR_1 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_2 ( STRING_1 , e ) ; } }
public void METHOD_1 ( ) { VAR_1 . submit ( new TYPE_1 ( this ) ) ; while ( true ) { } }
private TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_2 < > ( ) ; return this ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . put ( VAR_1 . user , VAR_1 ) ; if ( VAR_3 ) VAR_4 . METHOD_2 ( ( STRING_1 + ( VAR_5 . getName ( ) ) ) ) ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) ) ; VAR_1 . METHOD_2 ( ) ; }
private TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; return VAR_2 ; }
public void METHOD_1 ( ) { METHOD_2 ( ) ; try { this . VAR_1 . METHOD_3 ( ) ; } catch ( TYPE_1 e ) { VAR_2 . error ( STRING_1 , e ) ; TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ; } }
public void METHOD_1 ( ) { TYPE_1 t = new TYPE_1 ( VAR_1 ) ; t . METHOD_2 ( ) ; }
public void run ( ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; this . VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_2 e ) { } }
private synchronized void METHOD_1 ( ) { if ( VAR_1 ) return ; label . METHOD_2 ( true ) ; VAR_1 = true ; VAR_2 = false ; VAR_3 = new TYPE_1 ( this , STRING_1 ) ; VAR_3 . METHOD_1 ( ) ; }
public java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String [ ] args , TYPE_2 VAR_2 ) { return VAR_3 . METHOD_2 ( server , VAR_1 , TYPE_3 . METHOD_3 ( args ) ) ; }
private synchronized void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_1 = true ; VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public void METHOD_1 ( ) { VAR_1 = false ; TYPE_1 t = VAR_2 ; VAR_2 = null ; t . METHOD_2 ( ) ; }
private void METHOD_1 ( int i , java.lang.String name , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( new TYPE_3 ( VAR_3 , VAR_4 ) ) ; VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , i , name ) ) ; VAR_2 . METHOD_3 ( ) ; }
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = new TYPE_2 ( VAR_2 , this ) ; }
protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 e ) { try { VAR_1 . delete ( ) ; } catch ( TYPE_3 VAR_2 ) { VAR_2 . METHOD_2 ( ) ; } VAR_3 . METHOD_3 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int VAR_4 ) throws java.lang.Exception { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , STRING_1 ) ; }
public void METHOD_1 ( final TYPE_1 e ) { VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; METHOD_6 ( VAR_2 . METHOD_5 ( ) , false , false ) ; }
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ( STRING_1 + ( VAR_2 ) ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_3 ) ; }
public void METHOD_1 ( TYPE_1 event ) { this . VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ( ( java.lang.String . METHOD_4 ( VAR_2 ) ) + ( METHOD_5 ( VAR_4 ) ) ) ) ; }
public static void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) VAR_3 . METHOD_2 ( ) ; }
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( ) ; }
protected final void METHOD_1 ( final TYPE_1 VAR_1 ) { this . VAR_2 . METHOD_2 ( VAR_1 ) ; }
protected TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_2 < > ( ) ; VAR_2 = ( VAR_3 ) ? null : new TYPE_3 < TYPE_4 , TYPE_1 > ( ) ; VAR_4 = new java.util.ArrayList < > ( ) ; return this ; }
public static void METHOD_1 ( int i , java.util.List < TYPE_1 > VAR_1 ) { VAR_2 [ i ] = new TYPE_2 ( TYPE_1 . toString ( i ) , i , VAR_3 , VAR_4 , VAR_1 ) ; }
public static void METHOD_1 ( java.lang.String [ ] args ) { VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( args ) ; }
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this , STRING_1 ) ; while ( this . METHOD_3 ( ) ) { TYPE_2 . METHOD_4 ( ) ; } }
public void run ( ) { try { VAR_1 . METHOD_1 ( VAR_2 ) ; METHOD_2 ( ) ; } catch ( TYPE_1 e ) { VAR_3 . METHOD_3 ( ( STRING_1 + e ) ) ; } }
public void METHOD_1 ( TYPE_1 event ) { if ( ( VAR_1 ) == ( VAR_2 ) ) { VAR_3 . e ( ( STRING_1 + ( event . data ) ) ) ; METHOD_2 ( ( ( boolean ) ( event . data ) ) ) ; } }
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . METHOD_2 ( ) ; VAR_2 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) ) ; }
public synchronized void METHOD_1 ( ) { try { METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( INT_1 ) ; } catch ( java.lang.Exception e ) { VAR_1 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( ) ; } }
public void METHOD_1 ( ) throws java.io.IOException { this . VAR_1 = false ; VAR_2 . close ( ) ; VAR_3 . METHOD_2 ( ) ; }
protected TYPE_1 METHOD_1 ( boolean VAR_1 ) { TYPE_1 w = new TYPE_1 ( this , VAR_2 ) ; if ( VAR_1 ) { VAR_3 . METHOD_2 ( ) ; } w . METHOD_3 ( ) ; return w ; }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( VAR_2 == null ) { VAR_3 . set ( VAR_1 ) ; } }
public static TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 ) { return TYPE_3 . METHOD_2 ( VAR_1 , 0 , 1 , VAR_2 ) ; }
public static void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == ( VAR_2 ) ) { throw new TYPE_2 ( STRING_1 ) ; } TYPE_3 . METHOD_2 ( VAR_1 ) . METHOD_3 ( ) ; }
private void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( VAR_1 . METHOD_3 ( VAR_2 ) ) ; if ( VAR_3 ) { VAR_4 . METHOD_4 ( this , false ) ; } VAR_3 = false ; METHOD_5 ( ) ; VAR_4 . METHOD_6 ( ) ; }
public void METHOD_1 ( TYPE_1 e ) { this . VAR_1 . METHOD_2 ( false ) ; this . VAR_1 . METHOD_3 ( ) ; this . VAR_1 . METHOD_4 ( null ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; }
public synchronized void METHOD_1 ( ) { if ( ! ( VAR_1 ) ) return ; VAR_1 = false ; try { VAR_2 . METHOD_2 ( ) ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; } TYPE_2 . METHOD_4 ( 1 ) ; }
public void METHOD_1 ( TYPE_1 . HttpServletResponse VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { VAR_4 . METHOD_2 ( new TYPE_3 ( VAR_2 , VAR_3 ) ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; }
public void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , java.lang.String name , java.lang.String VAR_3 , java.lang.String VAR_4 ) { TYPE_1 VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , name , VAR_3 , VAR_4 ) ; METHOD_1 ( VAR_5 ) ; VAR_6 . set ( VAR_5 ) ; }
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( this ) ) ; METHOD_2 ( STRING_1 , 2 ) ; return VAR_1 ; }
public boolean METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_2 ( ) ; return true ; }
public java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { return new java.util.ArrayList < TYPE_1 < TYPE_2 > > ( this . VAR_1 ) ; }
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( ) ; TYPE_1 . i ( VAR_2 , STRING_1 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; this . VAR_2 = VAR_2 ; if ( VAR_2 <= 0 ) { throw new TYPE_3 ( STRING_1 ) ; } return this ; }
public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ; METHOD_4 ( TYPE_2 . id ( STRING_2 ) ) ; return new TYPE_1 ( VAR_1 ) ; }
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( METHOD_2 ( ) ) { TYPE_2 . d ( VAR_2 , STRING_1 ) ; TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_3 ) ; } }
public static TYPE_1 METHOD_1 ( java.lang.String name , int VAR_1 ) { return ( VAR_2 ) - > { java.lang.String VAR_3 = name ; TYPE_2 value = VAR_4 . get ( VAR_1 ) ; VAR_4 . METHOD_2 ( value ) ; } ; }
public void run ( ) { while ( ! ( VAR_1 ) ) { METHOD_1 ( ) ; try { TYPE_1 . METHOD_2 ( VAR_2 ) ; } catch ( TYPE_2 e ) { TYPE_3 . e ( STRING_1 , STRING_2 , e , VAR_3 ) ; } } }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 1 ) ; VAR_3 . METHOD_2 ( new TYPE_2 ( ) , 0 , VAR_4 , VAR_5 ) ; VAR_6 . info ( STRING_1 ) ; }
public java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( ( ( VAR_1 ) / INT_1 ) , TYPE_2 . METHOD_3 ( new TYPE_1 [ ] { this . input } ) ) ; }
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_2 ( this ) ; super . METHOD_1 ( ) ; }
void METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) ) ; int VAR_3 = TYPE_2 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) ; VAR_5 . METHOD_5 ( VAR_1 , VAR_3 ) ; VAR_6 . METHOD_6 ( STRING_1 ) ; }
public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = VAR_3 ; VAR_4 = VAR_5 ; VAR_6 = VAR_7 ; VAR_8 = VAR_9 ; VAR_1 . path = path ; return VAR_1 ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { METHOD_3 ( ) ; VAR_3 = false ; VAR_4 . METHOD_4 ( ) ; METHOD_5 ( ) ; } }
public TYPE_1 METHOD_1 ( ) { return this . VAR_1 ; }
public synchronized void METHOD_1 ( ) { if ( this . VAR_1 ) { return ; } VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this ) ; VAR_1 . METHOD_1 ( ) ; this . VAR_2 = true ; this . run ( ) ; }
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( METHOD_3 ( ) , VAR_2 , VAR_1 ) ; }
public static TYPE_1 METHOD_1 ( final int size , final java.lang.String VAR_1 ) { return new TYPE_2 ( size ) . METHOD_2 ( false ) . METHOD_3 ( VAR_2 ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( ( ! ( TYPE_4 . METHOD_3 ( ) ) ) , STRING_1 ) ; return METHOD_1 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getName ( ) ) ; }
public TYPE_1 . Status getStatus ( ) { return this . status ; }
void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; synchronized ( VAR_1 ) { VAR_2 = true ; VAR_1 . METHOD_4 ( ) ; } TYPE_2 . d ( VAR_3 , STRING_1 ) ; }
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_1 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 . e ( STRING_1 , java.lang.String . METHOD_2 ( TYPE_3 . METHOD_3 ( ) . METHOD_4 ( java.lang.String . METHOD_2 ( INT_1 ) ) ) ) ; METHOD_5 ( true ) ; }
public void METHOD_1 ( ) { VAR_1 = INT_1 ; VAR_2 = new TYPE_1 ( this , STRING_1 ) ; VAR_2 . METHOD_1 ( ) ; }
public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_3 ( ) ; }
public void METHOD_1 ( ) throws java.io.IOException { VAR_1 . close ( ) ; server . METHOD_1 ( ) ; VAR_2 . METHOD_1 ( ) ; }
void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { this . VAR_3 . METHOD_1 ( VAR_1 ) ; this . VAR_4 . METHOD_3 ( ) ; } finally { VAR_2 . METHOD_4 ( ) ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; this . VAR_2 . METHOD_1 ( ( this . VAR_2 . METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : new TYPE_1 ( ) ) ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( new TYPE_3 ( VAR_2 , VAR_1 . METHOD_2 ( ) ) ) ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_1 ( VAR_1 ) ; VAR_2 . set ( VAR_1 ) ; }
public void run ( ) { METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( this , INT_1 ) ; }
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { VAR_2 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; synchronized ( VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_3 ) VAR_4 . METHOD_5 ( ) ; } } }
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( ( ( this . VAR_2 ) ++ ) ) ; synchronized ( this . VAR_3 ) { ( this . VAR_3 ) ++ ; } }
protected void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { VAR_2 = VAR_1 [ 0 ] ; VAR_3 . METHOD_2 ( true ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , java.lang.String status ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . put ( status ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; }
private void METHOD_1 ( boolean VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 ) ; }
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 ( type ) , VAR_1 , VAR_2 , VAR_3 , name ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( this ) ; VAR_2 . METHOD_1 ( ) ; VAR_3 = false ; }
private TYPE_1 METHOD_1 ( ) { TYPE_2 < TYPE_1 > VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 . isEmpty ( ) ) { return null ; } return VAR_3 ? VAR_1 . METHOD_2 ( ) : null ; }
public void METHOD_1 ( ) { VAR_1 = true ; VAR_2 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( ( ( ( ( VAR_3 ) + STRING_1 ) + ( VAR_4 ) ) + STRING_2 ) ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_3 . get ( ) ; VAR_3 . set ( this ) ; return null ; }
public java.lang.String METHOD_1 ( ) { return ( VAR_1 ) == null ? name : VAR_1 ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ( STRING_1 + ( VAR_2 ) ) ) ; if ( ( t ) == null ) { t = new TYPE_1 ( this , VAR_2 ) ; t . METHOD_1 ( ) ; } }
private void METHOD_1 ( ) { for ( TYPE_1 n : VAR_1 ) { VAR_2 . METHOD_2 ( this ) ; } }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return true ; case VAR_3 : TYPE_2 . METHOD_3 ( this ) ; } return false ; }
public TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( INT_1 ) ; VAR_1 . METHOD_3 ( INT_2 ) ; return VAR_1 ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) { public void run ( ) { METHOD_2 ( ) ; } } ) ; VAR_1 . METHOD_1 ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; TYPE_3 . e ( VAR_3 , VAR_2 . METHOD_4 ( ) ) ; }
protected void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 ; if ( VAR_1 != null ) VAR_1 . METHOD_2 ( ) ; VAR_2 = null ; }
private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 . set ( METHOD_3 ( ) ) ; return VAR_2 . set ( VAR_1 . get ( ) , true ) ; } return false ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; TYPE_2 VAR_2 = ( ( TYPE_2 ) ( VAR_1 ) ) ; VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; }
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) VAR_1 . METHOD_3 ( true ) ; } s . close ( ) ; VAR_3 . METHOD_4 ( ) ; }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; }
public void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; try { VAR_1 . METHOD_3 ( ) ; VAR_1 = null ; } catch ( TYPE_1 e ) { } } }
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; TYPE_3 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( ) ; }
public void METHOD_1 ( ) { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } else { TYPE_1 . METHOD_4 ( INT_1 ) ; } }
private void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( false , true ) ) { TYPE_1 t = VAR_2 . METHOD_3 ( VAR_3 ) ; t . METHOD_4 ( ) ; VAR_4 = t ; } }
public void METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = true ; while ( VAR_2 ) { try { VAR_3 . METHOD_2 ( ) ; VAR_2 = false ; } catch ( TYPE_2 e ) { } } }
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_2 = new TYPE_2 ( this , STRING_2 ) ; VAR_1 = true ; VAR_2 . run ( ) ; }
public void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; VAR_2 . METHOD_2 ( ) ; VAR_3 . METHOD_3 ( true ) ; VAR_2 . METHOD_4 ( ) ; VAR_2 = null ; }
public void run ( ) { while ( METHOD_1 ( ) ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = VAR_2 . METHOD_3 ( this ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_4 ( ) ; } } }
public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( this , VAR_1 , VAR_2 , name , index ) ; }
public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) + VAR_1 ; }
public void METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; VAR_3 . METHOD_3 ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; }
public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; VAR_4 = true ; VAR_5 . METHOD_3 ( ( STRING_1 + ( VAR_2 ) ) ) ; }
public synchronized boolean METHOD_1 ( ) { if ( VAR_1 ) return false ; VAR_2 = new TYPE_1 ( this ) ; VAR_1 = true ; VAR_2 . METHOD_1 ( ) ; return true ; }
public int METHOD_1 ( ) { if ( ( VAR_1 ) <= 0 ) VAR_1 = METHOD_2 ( ) ; return VAR_1 ; }
public synchronized void METHOD_1 ( ) { VAR_1 = true ; VAR_2 = new TYPE_1 ( this , STRING_1 ) ; VAR_2 . METHOD_1 ( ) ; }
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . e ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; if ( ( VAR_3 ) != null ) VAR_3 . METHOD_3 ( ) ; }
public void run ( ) { this . log . METHOD_1 ( STRING_1 ) ; METHOD_2 ( ) ; }
private static void METHOD_1 ( TYPE_1 VAR_1 ) { try { ( VAR_2 ) ++ ; TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_1 . run ( ) ; } finally { ( VAR_2 ) -- ; TYPE_1 . METHOD_2 ( VAR_3 ) ; } }
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) throws java.lang.Exception { java.lang.String id = VAR_2 . METHOD_2 ( ) ; TYPE_2 < ? > VAR_3 = VAR_4 . run ( VAR_1 , id ) ; VAR_5 . put ( id , VAR_3 ) ; return id ; }
public TYPE_1 METHOD_1 ( TYPE_2 args , TYPE_3 ctx ) { TYPE_4 . METHOD_2 ( args . METHOD_3 ( 1 ) , args . METHOD_4 ( 2 ) ) ; TYPE_5 . METHOD_5 ( ) ; return TYPE_1 . METHOD_6 ( ) ; }
public synchronized void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = new TYPE_1 ( this , STRING_1 ) ; VAR_2 . METHOD_1 ( ) ; }
public void METHOD_1 ( java.lang.String VAR_1 ) { this . VAR_2 = new TYPE_1 ( VAR_1 ) ; TYPE_2 t = new TYPE_2 ( VAR_2 ) ; t . METHOD_2 ( ) ; }
protected void METHOD_1 ( ) throws TYPE_1 { super . METHOD_1 ( ) ; if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; } }
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 = new TYPE_3 ( VAR_2 ) ; }
public TYPE_1 METHOD_1 ( TYPE_2 ref , TYPE_3 input , int VAR_1 , int VAR_2 , int VAR_3 ) throws TYPE_4 { this . METHOD_2 ( ref ) ; return METHOD_3 ( input , VAR_1 , VAR_2 , VAR_3 ) ; }
public void METHOD_1 ( ) throws TYPE_1 { VAR_1 . METHOD_2 ( new TYPE_2 ( ) { public void run ( ) { VAR_2 . METHOD_3 ( STRING_1 ) ; } } , 0 , 1 , VAR_3 ) ; TYPE_3 . METHOD_4 ( INT_1 ) ; }
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( ) ; }
public void METHOD_1 ( ) { boolean VAR_1 = true ; VAR_2 = false ; while ( VAR_1 ) { try { VAR_3 . METHOD_2 ( ) ; VAR_1 = false ; } catch ( TYPE_1 e ) { e . METHOD_3 ( ) ; } } }
public static TYPE_1 METHOD_1 ( int VAR_1 ) { return ( VAR_2 ) - > { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; VAR_4 = VAR_3 ; VAR_4 . METHOD_3 ( ) ; } ; }
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , int VAR_3 ) { TYPE_3 . METHOD_2 ( VAR_2 , STRING_1 , VAR_3 ) ; return STRING_2 ; }
public void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 ) ) { METHOD_2 ( ) ; } }
public boolean METHOD_1 ( ) { return ( ( VAR_1 ) && ( ! ( VAR_2 ) ) ) && ( ( this . VAR_3 ) == null ) ; }
public void METHOD_1 ( ) { VAR_1 = true ; TYPE_1 VAR_2 = new TYPE_1 ( this ) ; VAR_2 . METHOD_1 ( ) ; }
public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 , VAR_2 ) ; VAR_3 . run ( ) ; VAR_4 . add ( VAR_3 ) ; }
public void close ( ) { TYPE_1 . out ( STRING_1 ) ; if ( VAR_1 ) { VAR_1 = false ; VAR_2 . close ( ) ; } }
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String value , java.lang.String VAR_2 ) { final java.lang.String message = VAR_3 . METHOD_2 ( VAR_1 , value , VAR_2 ) ; this . METHOD_3 ( VAR_1 , message ) ; }
public void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; } }
private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( ) ) { TYPE_2 . METHOD_3 ( STRING_1 ) ; } }
public void METHOD_1 ( ) { this . VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; }
private TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 info = get ( VAR_1 ) ; if ( info == null ) { put ( VAR_1 , ( info = new TYPE_1 ( ) ) ) ; } return info ; }
private static void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( ) { public void run ( ) { TYPE_3 . METHOD_2 ( ) ; } } ) ; VAR_1 . METHOD_3 ( true ) ; VAR_1 . METHOD_4 ( ) ; }
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ) || ( TYPE_2 . METHOD_2 ( VAR_4 , VAR_4 . METHOD_3 ( ) , VAR_1 ) ) ; }
public void run ( ) { while ( ( VAR_1 ) != null ) { try { METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( INT_1 ) ; } catch ( TYPE_2 VAR_2 ) { } } }
public void onSuccess ( TYPE_1 VAR_1 ) { METHOD_1 ( ) ; assert VAR_1 != null ; VAR_2 = VAR_3 . METHOD_2 ( ) ; VAR_4 . METHOD_3 ( id , null , VAR_1 . METHOD_4 ( ) ) ; METHOD_5 ( ) ; }
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 t , boolean VAR_2 ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; if ( VAR_2 ) { if ( t != null ) { t . METHOD_3 ( ) ; } } }
public synchronized void METHOD_1 ( ) { if ( VAR_1 ) return ; VAR_2 = new TYPE_1 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_4 = new TYPE_3 ( this ) ; VAR_5 = new TYPE_4 ( this ) ; VAR_5 . METHOD_1 ( ) ; }
public void METHOD_1 ( int VAR_1 ) throws TYPE_1 { TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 , VAR_3 ) ; VAR_2 . METHOD_2 ( ) ; TYPE_3 VAR_4 = new TYPE_4 ( ) ; this . METHOD_3 ( VAR_2 , VAR_4 ) ; }
public boolean METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { if ( VAR_1 [ i ] . METHOD_2 ( ) ) { return true ; } } return false ; }
public void METHOD_1 ( int VAR_1 ) { if ( ( VAR_1 < 1 ) || ( VAR_1 > INT_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } }
public void METHOD_1 ( ) { VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) / INT_1 ; synchronized ( VAR_2 ) { VAR_3 = null ; TYPE_2 . METHOD_3 ( ) ; } VAR_4 = null ; }
