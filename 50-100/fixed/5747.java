public org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> dragAcceleration(final org.orekit.time.AbsoluteDate date, final org.orekit.frames.Frame frame, final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> position, final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> rotation, final org.apache.commons.math3.analysis.differentiation.DerivativeStructure mass, final org.apache.commons.math3.analysis.differentiation.DerivativeStructure density, final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure> relativeVelocity) {
    return new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<org.apache.commons.math3.analysis.differentiation.DerivativeStructure>(relativeVelocity.getNorm().multiply(density.multiply((((dragCoeff) * (crossSection)) / 2))).divide(mass), relativeVelocity);
}